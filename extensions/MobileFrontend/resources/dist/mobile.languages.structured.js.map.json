{"version":3,"sources":["webpack://mfModules.[name]/./src/mobile.languages.structured/LanguageSearcher.js","webpack://mfModules.[name]/./src/mobile.languages.structured/mobile.languages.structured.js","webpack://mfModules.[name]/./src/mobile.languages.structured/rtlLanguages.js","webpack://mfModules.[name]/./src/mobile.languages.structured/util.js"],"names":["View","require","util","langUtil","LanguageSearcher","props","languages","getStructuredLanguages","variants","getFrequentlyUsedLanguages","showSuggestedLanguages","deviceLanguage","call","this","extend","className","events","inputPlaceholder","mw","msg","allLanguagesHeader","toLocaleUpperCase","suggestedLanguagesHeader","allLanguages","all","allLanguagesCount","length","suggestedLanguages","suggested","suggestedLanguagesCount","mfExtend","template","postRender","$siteLinksList","$el","find","$languageItems","$subheaders","onLinkClick","ev","lang","currentTarget","attr","hook","fire","saveLanguageUsageCount","onSearchInput","filterLanguages","target","val","toLowerCase","filteredList","options","forEach","language","langname","autonym","indexOf","push","variant","addClass","join","removeClass","module","exports","m","define","log","mfUtils","rtlLanguages","getDir","dir","frequentlyUsedLanguages","hasOwn","Object","prototype","hasOwnProperty","maxFrequency","minFrequency","missingDir","self","addLangDir","parentLanguage","index","deviceLanguagesWithVariants","slice","getDeviceLanguageOrParent","keys","frequency","map","sort","a","b","toLocaleLowerCase","warn","languageMap","storage","get","JSON","parse","saveFrequentlyUsedLanguages","set","stringify","languageCode","count"],"mappings":"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","file":"mobile.languages.structured.js","sourcesContent":["const\n\tView = require( '../mobile.startup/View' ),\n\tutil = require( '../mobile.startup/util' ),\n\tlangUtil = require( './util' ),\n\tmfExtend = require( '../mobile.startup/mfExtend' );\n\n/**\n * Overlay displaying a structured list of languages for a page\n *\n * @class LanguageSearcher\n * @extends View\n *\n * @param {Object} props Configuration options\n * @param {Object[]} props.languages list of language objects as returned by the API\n * @param {Array|boolean} props.variants language variant objects\n *  or false if no variants exist\n * @param {boolean} props.showSuggestedLanguages If the suggested languages\n *  section should be rendered.\n * @param {string} [props.deviceLanguage] the device's primary language\n */\nfunction LanguageSearcher( props ) {\n\t/**\n\t * @prop {StructuredLanguages} languages` JSDoc.\n\t */\n\tconst languages = langUtil.getStructuredLanguages(\n\t\tprops.languages,\n\t\tprops.variants,\n\t\tlangUtil.getFrequentlyUsedLanguages(),\n\t\tprops.showSuggestedLanguages,\n\t\tprops.deviceLanguage\n\t);\n\n\tView.call(\n\t\tthis,\n\t\tutil.extend(\n\t\t\t{\n\t\t\t\tclassName: 'language-searcher',\n\t\t\t\tevents: {\n\t\t\t\t\t'click a': 'onLinkClick',\n\t\t\t\t\t'input .search': 'onSearchInput'\n\t\t\t\t},\n\t\t\t\t// the rest are template properties\n\t\t\t\tinputPlaceholder: mw.msg( 'mobile-frontend-languages-structured-overlay-search-input-placeholder' ),\n\t\t\t\t// we can't rely on CSS only to uppercase the headings. See https://stackoverflow.com/questions/3777443/css-text-transform-not-working-properly-for-turkish-characters\n\t\t\t\tallLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-all-languages-header' ).toLocaleUpperCase(),\n\t\t\t\tsuggestedLanguagesHeader: mw.msg( 'mobile-frontend-languages-structured-overlay-suggested-languages-header' ).toLocaleUpperCase(),\n\t\t\t\tallLanguages: languages.all,\n\t\t\t\tallLanguagesCount: languages.all.length,\n\t\t\t\tsuggestedLanguages: languages.suggested,\n\t\t\t\tsuggestedLanguagesCount: languages.suggested.length\n\t\t\t},\n\t\t\tprops\n\t\t)\n\t);\n}\n\nmfExtend( LanguageSearcher, View, {\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageSearcher\n\t * @instance\n\t */\n\ttemplate: util.template( `\n<div class=\"panel\">\n\t<div class=\"panel-body search-box\">\n\t\t<input type=\"search\" class=\"search\" placeholder=\"{{inputPlaceholder}}\">\n\t</div>\n</div>\n\n<div class=\"overlay-content-body\">\n\t{{#suggestedLanguagesCount}}\n\t<h3 class=\"list-header\">{{suggestedLanguagesHeader}}</h3>\n\t<ol class=\"site-link-list suggested-languages\">\n\t\t{{#suggestedLanguages}}\n\t\t\t<li>\n\t\t\t\t<a href=\"{{url}}\" class=\"{{lang}}\" hreflang=\"{{lang}}\" lang=\"{{lang}}\" dir=\"{{dir}}\">\n\t\t\t\t\t<span class=\"autonym\">{{autonym}}</span>\n\t\t\t\t\t{{#title}}\n\t\t\t\t\t\t<span class=\"title\">{{title}}</span>\n\t\t\t\t\t{{/title}}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{{/suggestedLanguages}}\n\t</ol>\n\t{{/suggestedLanguagesCount}}\n\n\t{{#allLanguagesCount}}\n\t<h3 class=\"list-header\">{{allLanguagesHeader}} ({{allLanguagesCount}})</h3>\n\t<ul class=\"site-link-list all-languages\">\n\t\t{{#allLanguages}}\n\t\t\t<li>\n\t\t\t\t<a href=\"{{url}}\" class=\"{{lang}}\" hreflang=\"{{lang}}\" lang=\"{{lang}}\" dir=\"{{dir}}\">\n\t\t\t\t\t<span class=\"autonym\">{{autonym}}</span>\n\t\t\t\t\t{{#title}}\n\t\t\t\t\t\t<span class=\"title\">{{title}}</span>\n\t\t\t\t\t{{/title}}\n\t\t\t\t</a>\n\t\t\t</li>\n\t\t{{/allLanguages}}\n\t</ul>\n\t{{/allLanguagesCount}}\n</div>\n\t` ),\n\t/**\n\t * @inheritdoc\n\t * @memberof LanguageSearcher\n\t * @instance\n\t */\n\tpostRender: function () {\n\t\t// cache\n\t\tthis.$siteLinksList = this.$el.find( '.site-link-list' );\n\t\tthis.$languageItems = this.$siteLinksList.find( 'a' );\n\t\tthis.$subheaders = this.$el.find( 'h3' );\n\t},\n\t/**\n\t * Article link click event handler\n\t *\n\t * @memberof LanguageSearcher\n\t * @instance\n\t * @param {jQuery.Event} ev\n\t */\n\tonLinkClick: function ( ev ) {\n\t\tconst $link = this.$el.find( ev.currentTarget ),\n\t\t\tlang = $link.attr( 'lang' );\n\n\t\tmw.hook( 'mobileFrontend.languageSearcher.linkClick' ).fire( lang );\n\t\tlangUtil.saveLanguageUsageCount( lang, langUtil.getFrequentlyUsedLanguages() );\n\t},\n\t/**\n\t * Search input handler\n\t *\n\t * @memberof LanguageSearcher\n\t * @instance\n\t * @param {jQuery.Event} ev Event object.\n\t */\n\tonSearchInput: function ( ev ) {\n\t\tthis.filterLanguages( this.$el.find( ev.target ).val().toLowerCase() );\n\t},\n\t/**\n\t * Filter the language list to only show languages that match the current search term.\n\t *\n\t * @memberof LanguageSearcher\n\t * @instance\n\t * @param {string} val of search term (lowercase).\n\t */\n\tfilterLanguages: function ( val ) {\n\t\tconst filteredList = [];\n\n\t\tif ( val ) {\n\t\t\tthis.options.languages.forEach( function ( language ) {\n\t\t\t\tconst langname = language.langname;\n\t\t\t\t// search by language code or language name\n\t\t\t\tif ( language.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\t( langname && langname.toLowerCase().indexOf( val ) > -1 ) ||\n\t\t\t\t\t\tlanguage.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t) {\n\t\t\t\t\tfilteredList.push( language.lang );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tif ( this.options.variants ) {\n\t\t\t\tthis.options.variants.forEach( function ( variant ) {\n\t\t\t\t\t// search by variant code or variant name\n\t\t\t\t\tif ( variant.autonym.toLowerCase().indexOf( val ) > -1 ||\n\t\t\t\t\t\tvariant.lang.toLowerCase().indexOf( val ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\tfilteredList.push( variant.lang );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tthis.$languageItems.addClass( 'hidden' );\n\t\t\tif ( filteredList.length ) {\n\t\t\t\tthis.$siteLinksList.find( '.' + filteredList.join( ',.' ) ).removeClass( 'hidden' );\n\t\t\t}\n\t\t\tthis.$siteLinksList.addClass( 'filtered' );\n\t\t\tthis.$subheaders.addClass( 'hidden' );\n\t\t} else {\n\t\t\tthis.$languageItems.removeClass( 'hidden' );\n\t\t\tthis.$siteLinksList.removeClass( 'filtered' );\n\t\t\tthis.$subheaders.removeClass( 'hidden' );\n\t\t}\n\t}\n} );\n\nmodule.exports = LanguageSearcher;\n","const\n\tm = require( '../mobile.startup/moduleLoaderSingleton' ),\n\tLanguageSearcher = require( './LanguageSearcher' );\n\n// Needed because LanguageSearcher is lazy loaded, and if we try to use require\n// (instead of m.require), webpack will excise it into mobile.common.\nm.define( 'mobile.languages.structured/LanguageSearcher', LanguageSearcher );\n","module.exports = [\n\t'aeb',\n\t'aeb-arab',\n\t'ar',\n\t'arc',\n\t'arq',\n\t'arz',\n\t'azb',\n\t'bcc',\n\t'bgn',\n\t'bqi',\n\t'ckb',\n\t'dv',\n\t'fa',\n\t'glk',\n\t'he',\n\t'khw',\n\t'kk-arab',\n\t'kk-cn',\n\t'ks',\n\t'ks-arab',\n\t'ku-arab',\n\t'lki',\n\t'lrc',\n\t'luz',\n\t'mzn',\n\t'nqo',\n\t'pnb',\n\t'ps',\n\t'sd',\n\t'sdh',\n\t'skr',\n\t'skr-arab',\n\t'ug',\n\t'ug-arab',\n\t'ur',\n\t'yi'\n];\n","var\n\tlog = mw.log,\n\tmfUtils = require( '../mobile.startup/util' ),\n\trtlLanguages = require( './rtlLanguages' );\n\n/**\n * @typedef {Object} Language\n * @prop {string} autonym of language e.g. français\n * @prop {string} langname in the user's current language e.g French\n * @prop {string} title of the page in the language e.g. Espagne\n * @prop {string} dir (rtl or ltr)\n * @prop {string} url of the page\n *\n * @typedef {Object} SuggestedLanguage\n * @prop {string} autonym of language e.g. français\n * @prop {string} langname in the user's current language e.g French\n * @prop {string} title of the page in the language e.g. Espagne\n * @prop {string} dir (rtl or ltr)\n * @prop {string} url of the page\n * @prop {number} frequency of times the language has been used by the given user\n *\n * @typedef {Object} StructuredLanguages\n * @prop {Language[]} all languages that are available\n * @prop {SuggestedLanguage[]} suggested languages based on users browsing history\n */\n\n/**\n * Return the device language if it's in the list of article languages.\n * If the language is a variant of a general language, and if the article\n * is not available in that language, then return the general language\n * if article is available in it. For example, if the device language is\n * 'en-gb', and the article is only available in 'en', then return 'en'.\n *\n * @param {Object[]} languages list of language objects as returned by the API\n * @param {string|undefined} deviceLanguage the device's primary language\n * @return {string|undefined} Return undefined if the article is not available in\n *  the (general or variant) device language\n */\nfunction getDeviceLanguageOrParent( languages, deviceLanguage ) {\n\tvar parentLanguage, index,\n\t\thasOwn = Object.prototype.hasOwnProperty,\n\t\tdeviceLanguagesWithVariants = {};\n\n\tif ( !deviceLanguage ) {\n\t\treturn;\n\t}\n\n\t// Are we dealing with a variant?\n\tindex = deviceLanguage.indexOf( '-' );\n\tif ( index !== -1 ) {\n\t\tparentLanguage = deviceLanguage.slice( 0, index );\n\t}\n\n\tlanguages.forEach( function ( language ) {\n\t\tif ( language.lang === parentLanguage || language.lang === deviceLanguage ) {\n\t\t\tdeviceLanguagesWithVariants[ language.lang ] = true;\n\t\t}\n\t} );\n\n\tif ( hasOwn.call( deviceLanguagesWithVariants, deviceLanguage ) ) {\n\t\t// the device language is one of the available languages\n\t\treturn deviceLanguage;\n\t} else if ( hasOwn.call( deviceLanguagesWithVariants, parentLanguage ) ) {\n\t\t// no device language, but the parent language is one of the available languages\n\t\treturn parentLanguage;\n\t}\n}\n\n/**\n * Utility function for the structured language overlay\n *\n * @class util\n * @singleton\n */\nmodule.exports = {\n\t/**\n\t * Determine whether a language is LTR or RTL\n\t * This works around T74153 and T189036\n\t *\n\t * @memberof util\n\t * @instance\n\t * @param {Object} language with 'lang' key.\n\t * @return {Object} language with 'lang' key and new 'dir' key.\n\t */\n\tgetDir: function ( language ) {\n\t\tvar dir = rtlLanguages.indexOf( language.lang ) > -1 ? 'rtl' : 'ltr';\n\t\treturn mfUtils.extend( {}, language, { dir: dir } );\n\t},\n\n\t/**\n\t * Return two sets of languages: suggested and all (everything else)\n\t *\n\t * Suggested languages are the ones that the user has used before. This also\n\t * includes the user device's primary language. Suggested languages are ordered\n\t * by frequency in descending order. The device's language is always at the top.\n\t * This group also includes the variants.\n\t *\n\t * All languages are the languages that are not suggested.\n\t * Languages in this list are ordered in the lexicographical order of\n\t * their language names.\n\t *\n\t * @memberof util\n\t * @instance\n\t * @param {Object[]} languages list of language objects as returned by the API\n\t * @param {Array|boolean} variants language variant objects or false if no variants exist\n\t * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n\t * @param {boolean} showSuggestedLanguages\n\t * @param {string} [deviceLanguage] the device's primary language\n\t * @return {StructuredLanguages}\n\t */\n\tgetStructuredLanguages: function (\n\t\tlanguages,\n\t\tvariants,\n\t\tfrequentlyUsedLanguages,\n\t\tshowSuggestedLanguages,\n\t\tdeviceLanguage\n\t) {\n\t\tvar hasOwn = Object.prototype.hasOwnProperty,\n\t\t\tmaxFrequency = 0,\n\t\t\tminFrequency = 0,\n\t\t\tmissingDir = 0,\n\t\t\tsuggestedLanguages = [],\n\t\t\tallLanguages = [],\n\t\t\tself = this;\n\n\t\t// Is the article available in the user's device language?\n\t\tdeviceLanguage = getDeviceLanguageOrParent( languages, deviceLanguage );\n\t\tif ( deviceLanguage ) {\n\t\t\tObject.keys( frequentlyUsedLanguages ).forEach( function ( language ) {\n\t\t\t\tvar frequency = frequentlyUsedLanguages[ language ];\n\t\t\t\tmaxFrequency = maxFrequency < frequency ? frequency : maxFrequency;\n\t\t\t\tminFrequency = minFrequency > frequency ? frequency : minFrequency;\n\t\t\t} );\n\n\t\t\t// Make the device language the most frequently used one so that\n\t\t\t// it appears at the top of the list when sorted by frequency.\n\t\t\tfrequentlyUsedLanguages[ deviceLanguage ] = maxFrequency + 1;\n\t\t}\n\n\t\t/**\n\t\t * @param {Object} language\n\t\t * @return {Object} which has 'dir' key.\n\t\t */\n\t\tfunction addLangDir( language ) {\n\t\t\tif ( language.dir ) {\n\t\t\t\treturn language;\n\t\t\t} else {\n\t\t\t\tmissingDir++;\n\t\t\t\treturn self.getDir( language );\n\t\t\t}\n\t\t}\n\n\t\t// Separate languages into suggested and all languages.\n\t\tif ( showSuggestedLanguages ) {\n\t\t\tlanguages.map( addLangDir ).forEach( function ( language ) {\n\t\t\t\tif ( hasOwn.call( frequentlyUsedLanguages, language.lang ) ) {\n\t\t\t\t\tlanguage.frequency = frequentlyUsedLanguages[language.lang];\n\t\t\t\t\tsuggestedLanguages.push( language );\n\t\t\t\t} else {\n\t\t\t\t\tallLanguages.push( language );\n\t\t\t\t}\n\t\t\t} );\n\t\t} else {\n\t\t\tallLanguages = languages.map( addLangDir );\n\t\t}\n\n\t\t// Add variants to the suggested languages list and assign the lowest\n\t\t// frequency because the variant hasn't been clicked on yet.\n\t\t// Note that the variants data doesn't contain the article title, thus\n\t\t// we cannot show it for the variants.\n\t\tif ( variants && showSuggestedLanguages ) {\n\t\t\tvariants.map( addLangDir ).forEach( function ( variant ) {\n\t\t\t\tif ( hasOwn.call( frequentlyUsedLanguages, variant.lang ) ) {\n\t\t\t\t\tvariant.frequency = frequentlyUsedLanguages[variant.lang];\n\t\t\t\t} else {\n\t\t\t\t\tvariant.frequency = minFrequency - 1;\n\t\t\t\t}\n\t\t\t\tsuggestedLanguages.push( variant );\n\t\t\t} );\n\t\t}\n\n\t\t// sort suggested languages in descending order by frequency\n\t\tsuggestedLanguages = suggestedLanguages.sort( function ( a, b ) {\n\t\t\treturn b.frequency - a.frequency;\n\t\t} );\n\n\t\t/**\n\t\t * Compare language names lexicographically\n\t\t *\n\t\t * @param {Object} a first language\n\t\t * @param {Object} b second language\n\t\t * @return {number} Comparison value, 1 or -1\n\t\t */\n\t\tfunction compareLanguagesByLanguageName( a, b ) {\n\t\t\treturn a.autonym.toLocaleLowerCase() < b.autonym.toLocaleLowerCase() ? -1 : 1;\n\t\t}\n\n\t\tallLanguages = allLanguages.sort( compareLanguagesByLanguageName );\n\n\t\t// This works around T74153\n\t\tlog.warn(\n\t\t\tmissingDir === 0 ? 'Direction is provided. Please remove handling in getStructuredLanguages' :\n\t\t\t\t'`dir` attribute was missing from languages. Is T74153 resolved?'\n\t\t);\n\n\t\treturn {\n\t\t\tsuggested: suggestedLanguages,\n\t\t\tall: allLanguages\n\t\t};\n\t},\n\n\t/**\n\t * Return a map of frequently used languages on the current device.\n\t *\n\t * @memberof util\n\t * @instance\n\t * @return {Object}\n\t */\n\tgetFrequentlyUsedLanguages: function () {\n\t\tvar languageMap = mw.storage.get( 'langMap' );\n\n\t\treturn languageMap ? JSON.parse( languageMap ) : {};\n\t},\n\n\t/**\n\t * Save the frequently used languages to the user's device\n\t *\n\t * @memberof util\n\t * @instance\n\t * @param {Object} languageMap\n\t */\n\tsaveFrequentlyUsedLanguages: function ( languageMap ) {\n\t\tmw.storage.set( 'langMap', JSON.stringify( languageMap ) );\n\t},\n\n\t/**\n\t * Increment the current language usage by one and save it to the device.\n\t * Cap the result at 100.\n\t *\n\t * @memberof util\n\t * @instance\n\t * @param {string} languageCode\n\t * @param {Object} frequentlyUsedLanguages list of the frequently used languages\n\t */\n\tsaveLanguageUsageCount: function ( languageCode, frequentlyUsedLanguages ) {\n\t\tvar count = frequentlyUsedLanguages[ languageCode ] || 0;\n\n\t\tcount += 1;\n\t\t// cap at 100 as this is enough data to work on\n\t\tfrequentlyUsedLanguages[ languageCode ] = count > 100 ? 100 : count;\n\t\tthis.saveFrequentlyUsedLanguages( frequentlyUsedLanguages );\n\t}\n};\n"],"sourceRoot":""}