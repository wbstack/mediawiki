#!/usr/bin/env bash
# pacman takes a directory as an argument
# this directory must include a pacman.yml
# pacman will populate a dist folder in the same directory, from the pacman.yml

# exit when any command fails
set -e

if [ -z "$1" ]; then
    echo "Usage: $0 <target>"
    exit 1
fi

REPO_DIR="${1}"
YAMLFILE="${1}/pacman.yaml"
TEMPORARY_DIR=$(mktemp -d)/

# .tmp was removed so that the files in the repo dir were cleaner.
# The contents of the wbstack directory was moved so can also been cleaned up.
# This was changed in January 2022, we could remove this cleanup in the future.
OLD_TEMPORARY_DIR="$(realpath ${REPO_DIR}/wbstack)"
echo "Removing old wbstack directory (${OLD_TEMPORARY_DIR})"
rm -rf $OLD_TEMPORARY_DIR

for codebase in $(yq eval -o=j $YAMLFILE | jq -cr '.[]'); do
    # download and extract each artifact asynchronously
    # the brackets create a subshell
    (
        name=$(echo $codebase | jq -r '.name' -)
        artifactUrl=$(echo $codebase | jq -r '.artifactUrl' -)
        artifactLevel=$(echo $codebase | jq -r '.artifactLevel' -)
        temporaryFile="${TEMPORARY_DIR}${name}"
        temporaryExtraction="${TEMPORARY_DIR}${name}-extracted"
        echo "Downloading and extracting '${name}' from '${artifactUrl}' to '${temporaryExtraction}'";
        wget --quiet "$artifactUrl" -O "${temporaryFile}"
        rm -rf ${temporaryExtraction}
        mkdir -p ${temporaryExtraction}
        bsdtar --strip-components=${artifactLevel} -xf "${temporaryFile}" -C "${temporaryExtraction}"
    ) &
done

# wait for the artifacts to download
wait

# move them into place
for codebase in $(yq eval -o=j $YAMLFILE | jq -cr '.[]'); do
    name=$(echo $codebase | jq -r '.name' -)
    destination=$(echo $codebase | jq -r '.destination' -)
    temporaryExtraction="${TEMPORARY_DIR}${name}-extracted/."
    targetDestination="$(realpath -m ${REPO_DIR}/${destination})"
    echo "Moving '${name}' from '${temporaryExtraction}' to '${targetDestination}'";
    cp -fa "${temporaryExtraction}" "${targetDestination}"
done

# remove any not needed files
for codebase in $(yq eval -o=j $YAMLFILE | jq -cr '.[]'); do
    name=$(echo $codebase | jq -r '.name' -)
    destination=$(echo $codebase | jq -r '.destination' -)
    remove=$(echo $codebase | jq -r '.remove' -)
    if [ "$remove" = "null" ]; then
        continue
    fi
    echo $remove | jq -c -r '.[]' | while read removeEntry; do
        toRemove="$(realpath -m ${REPO_DIR}/${destination}/${removeEntry})"
        echo "Removing '${toRemove}'"
        rm -rf "${toRemove}"
    done
done
