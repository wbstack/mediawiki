#!/usr/bin/env bash
# pacman takes a directory as an argument
# this directory must include a pacman.yml
# pacman will populate a dist folder in the same directory, from the pacman.yml

# exit when any command fails
set -euo pipefail

if [ -z "$1" ]; then
    echo "Usage: $0 <target>"
    exit 1
fi

REPO_DIR="${1}"
YAMLFILE="${1}/pacman.yaml"
TEMPORARY_DIR="${REPO_DIR}/.tmp"

# import functions from pacman-utils script
source "${REPO_DIR}/sync/pacman/pacman-utils"

echo "Make sure temporary dir is created and empty (${TEMPORARY_DIR})"
rm -rf "${TEMPORARY_DIR}"
mkdir -p "${TEMPORARY_DIR}"

# The contents of the wbstack directory was moved so can been cleaned up.
# This was changed in January 2022, we could remove this cleanup in the future.
OLD_WBSTACK_DIR="$(realpath ${REPO_DIR}/wbstack)"
echo "Removing old wbstack directory (${OLD_WBSTACK_DIR})"
rm -rf "${OLD_WBSTACK_DIR}"

# exit the script if Ctrl+C pressed; this is needed once subshells are created.
trap 'exit 130' INT

# create a named pipe to redirect the output of the subshells to
FIFO="/tmp/pacman_fifo"
mkfifo $FIFO

subshell_pids=()
for codebase in $(yq eval -o=j $YAMLFILE | jq -cr '.[]'); do
    # download and extract each artifact asynchronously
    # the brackets create a subshell
    (
        name=$(echo $codebase | jq -r '.name' -)
        artifactUrl=$(echo $codebase | jq -r '.artifactUrl' -)
        artifactLevel=$(echo $codebase | jq -r '.artifactLevel' -)
        temporaryFile="${TEMPORARY_DIR}/${name}"
        temporaryExtraction="${TEMPORARY_DIR}/${name}-extracted"
        echo "Downloading '${name}' from '${artifactUrl}'"
        wget --quiet "$artifactUrl" -O "${temporaryFile}"
        echo "Extracting '${name}' to '${temporaryExtraction}'"
        mkdir -p ${temporaryExtraction}
        bsdtar --strip-components=${artifactLevel} -xf "${temporaryFile}" -C "${temporaryExtraction}"
        echo "Downloading and extracting '${name}' COMPLETE"
    ) &>$FIFO &

    # add each subshell's pid to an array
    subshell_pids+=( $! )
done

# wait for the subshells to finish while printing their output
subshell_wait "$FIFO" "${subshell_pids[@]}"

# includes filenames beginning with a '.' in the results of filename expansion (/*)
shopt -s dotglob

# move them into place
for codebase in $(yq eval -o=j $YAMLFILE | jq -cr '.[]'); do
    name=$(echo $codebase | jq -r '.name' -)
    destination=$(echo $codebase | jq -r '.destination' -)
    temporaryExtraction="${TEMPORARY_DIR}/${name}-extracted"
    targetDestination="$(realpath -m ${REPO_DIR}/${destination})"
    echo "Moving '${name}' from '${temporaryExtraction}' to '${targetDestination}'";
    mkdir -p "${targetDestination}"
    mv -f "${temporaryExtraction}"/* "${targetDestination}"
done

# remove any not needed files
for codebase in $(yq eval -o=j $YAMLFILE | jq -cr '.[]'); do
    name=$(echo $codebase | jq -r '.name' -)
    destination=$(echo $codebase | jq -r '.destination' -)
    remove=$(echo $codebase | jq -r '.remove' -)
    if [ "$remove" = "null" ]; then
        continue
    fi
    echo $remove | jq -c -r '.[]' | while read removeEntry; do
        toRemove="$(realpath -m ${REPO_DIR}/${destination}/${removeEntry})"
        echo "Removing '${toRemove}'"
        rm -rf "${toRemove}"
    done
done

# apply any final patches
for codebase in $(yq eval -o=j $YAMLFILE | jq -cr '.[]'); do
    name=$(echo $codebase | jq -r '.name' -)
    destination=$(echo $codebase | jq -r '.destination' -)
    targetDestination="$(realpath -m ${REPO_DIR}/${destination})"
    patch=$(echo $codebase | jq -r '.patchUrls' -)
    if [ "$patch" = "null" ]; then
        continue
    fi
    echo $patch | jq -c -r '.[]' | while read patchEntry; do
        echo "Applying ${patchEntry} to ${destination}"
        curl -s --output - ${patchEntry} |\
         base64 -d |\
         git apply -v --unsafe-paths --directory=${targetDestination}

    done
done

echo "Removing the temporary directory '${TEMPORARY_DIR}'"
rm -rf "${TEMPORARY_DIR}"
