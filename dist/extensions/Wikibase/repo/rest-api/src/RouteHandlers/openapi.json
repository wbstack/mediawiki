{
  "openapi": "3.1.0",
  "info": {
    "title": "Wikibase REST API",
    "version": "1.1",
    "description": "OpenAPI definition of Wikibase REST API",
    "contact": {
      "name": "Wikimedia Deutschland - Wikibase Product Platform Team",
      "url": "https://phabricator.wikimedia.org/project/board/6692/"
    },
    "license": {
      "name": "GNU General Public License v2.0 or later",
      "url": "https://spdx.org/licenses/GPL-2.0-or-later.html"
    }
  },
  "servers": [
    {
      "url": "https://wikibase.example/w/rest.php/wikibase/v1"
    }
  ],
  "tags": [
    {
      "name": "items",
      "description": "Wikibase Items",
      "externalDocs": {
        "description": "Wikibase Data Model - Items",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Items"
      }
    },
    {
      "name": "sitelinks",
      "description": "Wikibase Item Sitelinks",
      "externalDocs": {
        "description": "Wikibase Data Model - Sitelinks",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Sitelinks"
      }
    },
    {
      "name": "properties",
      "description": "Wikibase Properties",
      "externalDocs": {
        "description": "Wikibase Data Model - Properties",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Properties"
      }
    },
    {
      "name": "labels",
      "description": "Wikibase Labels",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "descriptions",
      "description": "Wikibase Descriptions",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "aliases",
      "description": "Wikibase Aliases",
      "externalDocs": {
        "description": "Wikibase Data Model - Terms",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#EntityDescriptions_of_Items_and_Properties"
      }
    },
    {
      "name": "statements",
      "description": "Wikibase Statements",
      "externalDocs": {
        "description": "Wikibase Data Model - Statements",
        "url": "https://www.mediawiki.org/wiki/Wikibase/DataModel#Statements"
      }
    }
  ],
  "paths": {
    "/openapi.json": {
      "get": {
        "operationId": "getOpenApiDoc",
        "tags": [
          "OpenAPI document"
        ],
        "summary": "Retrieve the OpenAPI document",
        "responses": {
          "200": {
            "description": "OpenAPI document",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "openapi": "...",
                  "info": {
                    "title": "Wikibase REST API",
                    "version": "...",
                    "description": "OpenAPI definition of Wikibase REST API"
                  },
                  "paths": "..."
                }
              }
            }
          }
        }
      }
    },
    "/property-data-types": {
      "get": {
        "operationId": "getPropertyDataTypes",
        "tags": [
          "Property data types"
        ],
        "summary": "Retrieve the map of Property data types to value types",
        "responses": {
          "200": {
            "description": "The map of Property data types to value types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "data-type": "value-type"
                }
              }
            }
          }
        }
      }
    },
    "/entities/items": {
      "post": {
        "operationId": "addItem",
        "tags": [
          "items"
        ],
        "summary": "Create a Wikibase Item",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Item and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "item": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "const": "item",
                            "readOnly": true
                          },
                          "labels": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "descriptions": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "aliases": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "sitelinks": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string"
                                },
                                "badges": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  }
                                },
                                "url": {
                                  "type": "string",
                                  "readOnly": true
                                }
                              },
                              "required": [
                                "title"
                              ]
                            }
                          },
                          "statements": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The globally unique identifier for this Statement",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "rank": {
                                        "description": "The rank of the Statement",
                                        "type": "string",
                                        "enum": [
                                          "deprecated",
                                          "normal",
                                          "preferred"
                                        ],
                                        "default": "normal"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "qualifiers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "default": []
                                      },
                                      "references": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "description": "Hash of the Reference",
                                              "type": "string",
                                              "readOnly": true
                                            },
                                            "parts": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "property": {
                                                    "type": "object",
                                                    "properties": {
                                                      "id": {
                                                        "description": "The ID of the Property",
                                                        "type": "string"
                                                      },
                                                      "data_type": {
                                                        "description": "The data type of the Property",
                                                        "type": [
                                                          "string",
                                                          "null"
                                                        ],
                                                        "readOnly": true
                                                      }
                                                    }
                                                  },
                                                  "value": {
                                                    "type": "object",
                                                    "properties": {
                                                      "content": {
                                                        "description": "The value, if type == \"value\", otherwise omitted"
                                                      },
                                                      "type": {
                                                        "description": "The value type",
                                                        "type": "string",
                                                        "enum": [
                                                          "value",
                                                          "somevalue",
                                                          "novalue"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "default": []
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "item"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "item": {
                  "labels": {
                    "en": "Jane Doe",
                    "ru": "Джейн Доу"
                  },
                  "descriptions": {
                    "en": "famous person",
                    "ru": "известная личность"
                  },
                  "aliases": {
                    "en": [
                      "Jane M. Doe",
                      "JD"
                    ],
                    "ru": [
                      "Джейн М. Доу"
                    ]
                  },
                  "statements": {
                    "P694": [
                      {
                        "property": {
                          "id": "P694"
                        },
                        "value": {
                          "type": "value",
                          "content": "Q626683"
                        }
                      }
                    ],
                    "P476": [
                      {
                        "property": {
                          "id": "P476"
                        },
                        "value": {
                          "type": "value",
                          "content": {
                            "time": "+1986-01-27T00:00:00Z",
                            "precision": 11,
                            "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                          }
                        }
                      }
                    ],
                    "P17": [
                      {
                        "property": {
                          "id": "P17"
                        },
                        "value": {
                          "type": "value",
                          "content": "Senior Team Supervisor"
                        },
                        "qualifiers": [
                          {
                            "property": {
                              "id": "P706"
                            },
                            "value": {
                              "type": "value",
                              "content": {
                                "time": "+2023-06-13T00:00:00Z",
                                "precision": 11,
                                "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                              }
                            }
                          }
                        ],
                        "references": [
                          {
                            "parts": [
                              {
                                "property": {
                                  "id": "P709"
                                },
                                "value": {
                                  "type": "value",
                                  "content": "https://news.example.org"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "sitelinks": {
                    "enwiki": {
                      "title": "Jane Doe"
                    },
                    "ruwiki": {
                      "title": "Джейн Доу"
                    }
                  }
                },
                "comment": "Create an Item for Jane Doe"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A single Wikibase Item",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "item",
                          "readOnly": true
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "sitelinks": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string"
                              },
                              "badges": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "url": {
                                "type": "string",
                                "readOnly": true
                              }
                            },
                            "required": [
                              "title"
                            ]
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "required": [
                        "id",
                        "type",
                        "labels",
                        "descriptions",
                        "aliases",
                        "statements",
                        "sitelinks"
                      ],
                      "properties": {
                        "sitelinks": {
                          "additionalProperties": {
                            "required": [
                              "title",
                              "badges",
                              "url"
                            ]
                          }
                        },
                        "statements": {
                          "additionalProperties": {
                            "items": {
                              "allOf": [
                                {
                                  "required": [
                                    "property",
                                    "value"
                                  ],
                                  "properties": {
                                    "property": {
                                      "required": [
                                        "id",
                                        "data_type"
                                      ]
                                    },
                                    "value": {
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "required": [
                                    "id",
                                    "rank",
                                    "qualifiers",
                                    "references"
                                  ],
                                  "properties": {
                                    "qualifiers": {
                                      "items": {
                                        "required": [
                                          "property",
                                          "value"
                                        ],
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "references": {
                                      "items": {
                                        "required": [
                                          "hash",
                                          "parts"
                                        ],
                                        "properties": {
                                          "parts": {
                                            "items": {
                                              "required": [
                                                "property",
                                                "value"
                                              ],
                                              "properties": {
                                                "property": {
                                                  "required": [
                                                    "id",
                                                    "data_type"
                                                  ]
                                                },
                                                "value": {
                                                  "required": [
                                                    "type"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "id": "Q24",
                  "type": "item",
                  "labels": {
                    "en": "Jane Doe",
                    "ru": "Джейн Доу"
                  },
                  "descriptions": {
                    "en": "famous person",
                    "ru": "известная личность"
                  },
                  "aliases": {
                    "en": [
                      "Jane M. Doe",
                      "JD"
                    ],
                    "ru": [
                      "Джейн М. Доу"
                    ]
                  },
                  "statements": {
                    "P694": [
                      {
                        "id": "Q24$BB728546-A400-4116-A772-16D54B62AC2B",
                        "rank": "normal",
                        "property": {
                          "id": "P694",
                          "data_type": "wikibase-item"
                        },
                        "value": {
                          "type": "value",
                          "content": "Q626683"
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ],
                    "P476": [
                      {
                        "id": "Q24$F3B2F956-B6AB-4984-8D89-BEE0FFFA3385",
                        "rank": "normal",
                        "property": {
                          "id": "P476",
                          "data_type": "time"
                        },
                        "value": {
                          "type": "value",
                          "content": {
                            "time": "+1986-01-27T00:00:00Z",
                            "precision": 11,
                            "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                          }
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ],
                    "P17": [
                      {
                        "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                        "rank": "normal",
                        "property": {
                          "id": "P17",
                          "data_type": "string"
                        },
                        "value": {
                          "type": "value",
                          "content": "Senior Team Supervisor"
                        },
                        "qualifiers": [
                          {
                            "property": {
                              "id": "P706",
                              "data_type": "time"
                            },
                            "value": {
                              "type": "value",
                              "content": {
                                "time": "+2023-06-13T00:00:00Z",
                                "precision": 11,
                                "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                              }
                            }
                          }
                        ],
                        "references": [
                          {
                            "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                            "parts": [
                              {
                                "property": {
                                  "id": "P709",
                                  "data_type": "url"
                                },
                                "value": {
                                  "type": "value",
                                  "content": "https://news.example.org"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "sitelinks": {
                    "enwiki": {
                      "title": "Jane Doe",
                      "badges": [],
                      "url": "https://enwiki.example.org/wiki/Jane_Doe"
                    },
                    "ruwiki": {
                      "title": "Джейн Доу",
                      "badges": [],
                      "url": "https://ruwiki.example.org/wiki/Джейн_Доу"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "statement-group-property-id-mismatch": {
                    "value": {
                      "code": "statement-group-property-id-mismatch",
                      "message": "Statement's Property ID does not match the Statement group key",
                      "context": {
                        "path": "{property_id_key}/{index}/property/id",
                        "statement_group_property_id": "{property_id_key}",
                        "statement_property_id": "{property_id_value}"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "invalid-key": {
                    "value": {
                      "code": "invalid-key",
                      "message": "Invalid key '{key}' in '{json_pointer_to_parent}'",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "key": "{key}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "422": {
            "description": "The edit request violates data policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}": {
      "get": {
        "operationId": "getItem",
        "tags": [
          "items"
        ],
        "summary": "Retrieve a single Wikibase Item by ID",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "query",
            "name": "_fields",
            "description": "Comma-separated list of fields to include in each response object.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "type",
                  "labels",
                  "descriptions",
                  "aliases",
                  "statements",
                  "sitelinks"
                ]
              }
            },
            "explode": false,
            "style": "form"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A single Wikibase Item",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "item",
                          "readOnly": true
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "sitelinks": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string"
                              },
                              "badges": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "url": {
                                "type": "string",
                                "readOnly": true
                              }
                            },
                            "required": [
                              "title"
                            ]
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "required": [
                        "id",
                        "type",
                        "labels",
                        "descriptions",
                        "aliases",
                        "statements",
                        "sitelinks"
                      ],
                      "properties": {
                        "sitelinks": {
                          "additionalProperties": {
                            "required": [
                              "title",
                              "badges",
                              "url"
                            ]
                          }
                        },
                        "statements": {
                          "additionalProperties": {
                            "items": {
                              "allOf": [
                                {
                                  "required": [
                                    "property",
                                    "value"
                                  ],
                                  "properties": {
                                    "property": {
                                      "required": [
                                        "id",
                                        "data_type"
                                      ]
                                    },
                                    "value": {
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "required": [
                                    "id",
                                    "rank",
                                    "qualifiers",
                                    "references"
                                  ],
                                  "properties": {
                                    "qualifiers": {
                                      "items": {
                                        "required": [
                                          "property",
                                          "value"
                                        ],
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "references": {
                                      "items": {
                                        "required": [
                                          "hash",
                                          "parts"
                                        ],
                                        "properties": {
                                          "parts": {
                                            "items": {
                                              "required": [
                                                "property",
                                                "value"
                                              ],
                                              "properties": {
                                                "property": {
                                                  "required": [
                                                    "id",
                                                    "data_type"
                                                  ]
                                                },
                                                "value": {
                                                  "required": [
                                                    "type"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "id": "Q24",
                  "type": "item",
                  "labels": {
                    "en": "Jane Doe",
                    "ru": "Джейн Доу"
                  },
                  "descriptions": {
                    "en": "famous person",
                    "ru": "известная личность"
                  },
                  "aliases": {
                    "en": [
                      "Jane M. Doe",
                      "JD"
                    ],
                    "ru": [
                      "Джейн М. Доу"
                    ]
                  },
                  "statements": {
                    "P694": [
                      {
                        "id": "Q24$BB728546-A400-4116-A772-16D54B62AC2B",
                        "rank": "normal",
                        "property": {
                          "id": "P694",
                          "data_type": "wikibase-item"
                        },
                        "value": {
                          "type": "value",
                          "content": "Q626683"
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ],
                    "P476": [
                      {
                        "id": "Q24$F3B2F956-B6AB-4984-8D89-BEE0FFFA3385",
                        "rank": "normal",
                        "property": {
                          "id": "P476",
                          "data_type": "time"
                        },
                        "value": {
                          "type": "value",
                          "content": {
                            "time": "+1986-01-27T00:00:00Z",
                            "precision": 11,
                            "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                          }
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ],
                    "P17": [
                      {
                        "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                        "rank": "normal",
                        "property": {
                          "id": "P17",
                          "data_type": "string"
                        },
                        "value": {
                          "type": "value",
                          "content": "Senior Team Supervisor"
                        },
                        "qualifiers": [
                          {
                            "property": {
                              "id": "P706",
                              "data_type": "time"
                            },
                            "value": {
                              "type": "value",
                              "content": {
                                "time": "+2023-06-13T00:00:00Z",
                                "precision": 11,
                                "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                              }
                            }
                          }
                        ],
                        "references": [
                          {
                            "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                            "parts": [
                              {
                                "property": {
                                  "id": "P709",
                                  "data_type": "url"
                                },
                                "value": {
                                  "type": "value",
                                  "content": "https://news.example.org"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "sitelinks": {
                    "enwiki": {
                      "title": "Jane Doe",
                      "badges": [],
                      "url": "https://enwiki.example.org/wiki/Jane_Doe"
                    },
                    "ruwiki": {
                      "title": "Джейн Доу",
                      "badges": [],
                      "url": "https://ruwiki.example.org/wiki/Джейн_Доу"
                    }
                  }
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-query-parameter": {
                    "value": {
                      "code": "invalid-query-parameter",
                      "message": "Invalid query parameter: '{parameter}'",
                      "context": {
                        "parameter": "{parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchItem",
        "tags": [
          "items"
        ],
        "summary": "Change a single Wikibase Item by ID",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/labels/en",
                    "value": "Jane Doe"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Update the English label"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/labels/en",
                    "value": "Jane Doe"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Update the English label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A single Wikibase Item",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "item",
                          "readOnly": true
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "sitelinks": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string"
                              },
                              "badges": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "url": {
                                "type": "string",
                                "readOnly": true
                              }
                            },
                            "required": [
                              "title"
                            ]
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "required": [
                        "id",
                        "type",
                        "labels",
                        "descriptions",
                        "aliases",
                        "statements",
                        "sitelinks"
                      ],
                      "properties": {
                        "sitelinks": {
                          "additionalProperties": {
                            "required": [
                              "title",
                              "badges",
                              "url"
                            ]
                          }
                        },
                        "statements": {
                          "additionalProperties": {
                            "items": {
                              "allOf": [
                                {
                                  "required": [
                                    "property",
                                    "value"
                                  ],
                                  "properties": {
                                    "property": {
                                      "required": [
                                        "id",
                                        "data_type"
                                      ]
                                    },
                                    "value": {
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "required": [
                                    "id",
                                    "rank",
                                    "qualifiers",
                                    "references"
                                  ],
                                  "properties": {
                                    "qualifiers": {
                                      "items": {
                                        "required": [
                                          "property",
                                          "value"
                                        ],
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "references": {
                                      "items": {
                                        "required": [
                                          "hash",
                                          "parts"
                                        ],
                                        "properties": {
                                          "parts": {
                                            "items": {
                                              "required": [
                                                "property",
                                                "value"
                                              ],
                                              "properties": {
                                                "property": {
                                                  "required": [
                                                    "id",
                                                    "data_type"
                                                  ]
                                                },
                                                "value": {
                                                  "required": [
                                                    "type"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "id": "Q24",
                  "type": "item",
                  "labels": {
                    "en": "Jane Doe",
                    "ru": "Джейн Доу"
                  },
                  "descriptions": {
                    "en": "famous person",
                    "ru": "известная личность"
                  },
                  "aliases": {
                    "en": [
                      "Jane M. Doe",
                      "JD"
                    ],
                    "ru": [
                      "Джейн М. Доу"
                    ]
                  },
                  "statements": {
                    "P694": [
                      {
                        "id": "Q24$BB728546-A400-4116-A772-16D54B62AC2B",
                        "rank": "normal",
                        "property": {
                          "id": "P694",
                          "data_type": "wikibase-item"
                        },
                        "value": {
                          "type": "value",
                          "content": "Q626683"
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ],
                    "P476": [
                      {
                        "id": "Q24$F3B2F956-B6AB-4984-8D89-BEE0FFFA3385",
                        "rank": "normal",
                        "property": {
                          "id": "P476",
                          "data_type": "time"
                        },
                        "value": {
                          "type": "value",
                          "content": {
                            "time": "+1986-01-27T00:00:00Z",
                            "precision": 11,
                            "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                          }
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ],
                    "P17": [
                      {
                        "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                        "rank": "normal",
                        "property": {
                          "id": "P17",
                          "data_type": "string"
                        },
                        "value": {
                          "type": "value",
                          "content": "Senior Team Supervisor"
                        },
                        "qualifiers": [
                          {
                            "property": {
                              "id": "P706",
                              "data_type": "time"
                            },
                            "value": {
                              "type": "value",
                              "content": {
                                "time": "+2023-06-13T00:00:00Z",
                                "precision": 11,
                                "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                              }
                            }
                          }
                        ],
                        "references": [
                          {
                            "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                            "parts": [
                              {
                                "property": {
                                  "id": "P709",
                                  "data_type": "url"
                                },
                                "value": {
                                  "type": "value",
                                  "content": "https://news.example.org"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  },
                  "sitelinks": {
                    "enwiki": {
                      "title": "Jane Doe",
                      "badges": [],
                      "url": "https://enwiki.example.org/wiki/Jane_Doe"
                    },
                    "ruwiki": {
                      "title": "Джейн Доу",
                      "badges": [],
                      "url": "https://ruwiki.example.org/wiki/Джейн_Доу"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  },
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in an invalid Property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patched-statement-group-property-id-mismatch": {
                    "value": {
                      "code": "patched-statement-group-property-id-mismatch",
                      "message": "Statement's Property ID does not match the Statement group key",
                      "context": {
                        "path": "{property_id_key}/{index}/property/id",
                        "statement_group_property_id": "{property_id_key}",
                        "statement_property_id": "{property_id_value}"
                      }
                    }
                  },
                  "patch-result-referenced-resource-not-found": {
                    "value": {
                      "code": "patch-result-referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer_to_missing_resource_in_patch_result}",
                        "value": "{value}"
                      }
                    }
                  },
                  "patch-result-missing-field": {
                    "value": {
                      "code": "patch-result-missing-field",
                      "message": "Required field missing in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "patch-result-modified-read-only-value": {
                    "value": {
                      "code": "patch-result-modified-read-only-value",
                      "message": "Read only value in patch result cannot be modified",
                      "context": {
                        "path": "{json_pointer_to_readonly_value}"
                      }
                    }
                  },
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/sitelinks": {
      "get": {
        "operationId": "getSitelinks",
        "tags": [
          "sitelinks"
        ],
        "summary": "Retrieve an Item's Sitelinks",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of Sitelinks by Item id",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string"
                      },
                      "badges": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "url": {
                        "type": "string",
                        "readOnly": true
                      }
                    },
                    "required": [
                      "title"
                    ]
                  }
                },
                "example": {
                  "enwiki": {
                    "title": "Jane Doe",
                    "badges": [],
                    "url": "https://enwiki.example.org/wiki/Jane_Doe"
                  },
                  "ruwiki": {
                    "title": "Джейн Доу",
                    "badges": [],
                    "url": "https://ruwiki.example.org/wiki/Джейн_Доу"
                  }
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchSitelinks",
        "tags": [
          "sitelinks"
        ],
        "summary": "Change an Item's Sitelinks",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/ruwiki/title",
                    "value": "Джейн Доу"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add sitelink to ruwiki"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/ruwiki/title",
                    "value": "Джейн Доу"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add sitelink to ruwiki"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A list of Sitelinks by Item id",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "title": {
                        "type": "string"
                      },
                      "badges": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      },
                      "url": {
                        "type": "string",
                        "readOnly": true
                      }
                    },
                    "required": [
                      "title"
                    ]
                  }
                },
                "example": {
                  "enwiki": {
                    "title": "Jane Doe",
                    "badges": [],
                    "url": "https://enwiki.example.org/wiki/Jane_Doe"
                  },
                  "ruwiki": {
                    "title": "Джейн Доу",
                    "badges": [],
                    "url": "https://ruwiki.example.org/wiki/Джейн_Доу"
                  }
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  },
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in invalid Sitelinks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-referenced-resource-not-found": {
                    "value": {
                      "code": "patch-result-referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer_to_missing_resource_in_patch_result}",
                        "value": "{value}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-missing-field": {
                    "value": {
                      "code": "patch-result-missing-field",
                      "message": "Required field missing in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-modified-read-only-value": {
                    "value": {
                      "code": "patch-result-modified-read-only-value",
                      "message": "Read only value in patch result cannot be modified",
                      "context": {
                        "path": "{json_pointer_to_readonly_value}"
                      }
                    }
                  },
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/sitelinks/{site_id}": {
      "get": {
        "operationId": "getSitelink",
        "tags": [
          "sitelinks"
        ],
        "summary": "Retrieve an Item's Sitelink",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "site_id",
            "description": "The ID of the required Site",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "enwiki"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A Sitelink by Item id",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "badges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "url": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "title"
                  ]
                },
                "example": {
                  "title": "Jane Doe",
                  "badges": [],
                  "url": "https://enwiki.example.org/wiki/Jane_Doe"
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "setSitelink",
        "tags": [
          "sitelinks"
        ],
        "summary": "Add / Replace an Item's Sitelink",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "site_id",
            "description": "The ID of the required Site",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "enwiki"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Sitelink object and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "sitelink": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "badges": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "url": {
                            "type": "string",
                            "readOnly": true
                          }
                        },
                        "required": [
                          "title"
                        ]
                      }
                    },
                    "required": [
                      "sitelink"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "sitelink": {
                  "title": "Jane Doe",
                  "badges": []
                },
                "tags": [],
                "bot": false,
                "comment": "Add enwiki sitelink"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Sitelink",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "badges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "url": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "title"
                  ]
                },
                "example": {
                  "title": "Jane Doe",
                  "badges": [],
                  "url": "https://enwiki.example.org/wiki/Jane_Doe"
                }
              }
            }
          },
          "201": {
            "description": "The newly added Sitelink",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "badges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "url": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "title"
                  ]
                },
                "example": {
                  "title": "Jane Doe",
                  "badges": [],
                  "url": "https://enwiki.example.org/wiki/Jane_Doe"
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "The edit request violates data policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteSitelink",
        "tags": [
          "sitelinks"
        ],
        "summary": "Delete an Item's Sitelink",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "site_id",
            "description": "The ID of the required Site",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "enwiki"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resource was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Sitelink deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties": {
      "post": {
        "operationId": "addProperty",
        "tags": [
          "properties"
        ],
        "summary": "Create a Wikibase Property",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Property and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "property": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "readOnly": true
                          },
                          "type": {
                            "type": "string",
                            "const": "property",
                            "readOnly": true
                          },
                          "data_type": {
                            "type": "string"
                          },
                          "labels": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "descriptions": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "string"
                            }
                          },
                          "aliases": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "statements": {
                            "type": "object",
                            "additionalProperties": {
                              "type": "array",
                              "items": {
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The globally unique identifier for this Statement",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "rank": {
                                        "description": "The rank of the Statement",
                                        "type": "string",
                                        "enum": [
                                          "deprecated",
                                          "normal",
                                          "preferred"
                                        ],
                                        "default": "normal"
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "qualifiers": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "default": []
                                      },
                                      "references": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "hash": {
                                              "description": "Hash of the Reference",
                                              "type": "string",
                                              "readOnly": true
                                            },
                                            "parts": {
                                              "type": "array",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "property": {
                                                    "type": "object",
                                                    "properties": {
                                                      "id": {
                                                        "description": "The ID of the Property",
                                                        "type": "string"
                                                      },
                                                      "data_type": {
                                                        "description": "The data type of the Property",
                                                        "type": [
                                                          "string",
                                                          "null"
                                                        ],
                                                        "readOnly": true
                                                      }
                                                    }
                                                  },
                                                  "value": {
                                                    "type": "object",
                                                    "properties": {
                                                      "content": {
                                                        "description": "The value, if type == \"value\", otherwise omitted"
                                                      },
                                                      "type": {
                                                        "description": "The value type",
                                                        "type": "string",
                                                        "enum": [
                                                          "value",
                                                          "somevalue",
                                                          "novalue"
                                                        ]
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        },
                                        "default": []
                                      }
                                    }
                                  }
                                ]
                              }
                            }
                          }
                        },
                        "required": [
                          "data_type"
                        ]
                      }
                    },
                    "required": [
                      "property"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "property": {
                  "data_type": "wikibase-item",
                  "labels": {
                    "en": "instance of",
                    "ru": "это частный случай понятия"
                  },
                  "descriptions": {
                    "en": "the subject is a concrete object (instance) of this class, category, or object group",
                    "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории"
                  },
                  "aliases": {
                    "en": [
                      "is a",
                      "is an"
                    ],
                    "ru": [
                      "представляет собой",
                      "является"
                    ]
                  },
                  "statements": {
                    "P1628": [
                      {
                        "property": {
                          "id": "P1628"
                        },
                        "value": {
                          "type": "value",
                          "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A single Wikibase Property",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "property",
                          "readOnly": true
                        },
                        "data_type": {
                          "type": "string"
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "data_type"
                      ]
                    },
                    {
                      "required": [
                        "id",
                        "type",
                        "data_type",
                        "labels",
                        "descriptions",
                        "aliases",
                        "statements"
                      ],
                      "properties": {
                        "statements": {
                          "additionalProperties": {
                            "items": {
                              "allOf": [
                                {
                                  "required": [
                                    "property",
                                    "value"
                                  ],
                                  "properties": {
                                    "property": {
                                      "required": [
                                        "id",
                                        "data_type"
                                      ]
                                    },
                                    "value": {
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "required": [
                                    "id",
                                    "rank",
                                    "qualifiers",
                                    "references"
                                  ],
                                  "properties": {
                                    "qualifiers": {
                                      "items": {
                                        "required": [
                                          "property",
                                          "value"
                                        ],
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "references": {
                                      "items": {
                                        "required": [
                                          "hash",
                                          "parts"
                                        ],
                                        "properties": {
                                          "parts": {
                                            "items": {
                                              "required": [
                                                "property",
                                                "value"
                                              ],
                                              "properties": {
                                                "property": {
                                                  "required": [
                                                    "id",
                                                    "data_type"
                                                  ]
                                                },
                                                "value": {
                                                  "required": [
                                                    "type"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "id": "P694",
                  "type": "property",
                  "data_type": "wikibase-item",
                  "labels": {
                    "en": "instance of",
                    "ru": "это частный случай понятия"
                  },
                  "descriptions": {
                    "en": "the subject is a concrete object (instance) of this class, category, or object group",
                    "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории."
                  },
                  "aliases": {
                    "en": [
                      "is a",
                      "is an"
                    ],
                    "ru": [
                      "представляет собой",
                      "является"
                    ]
                  },
                  "statements": {
                    "P1628": [
                      {
                        "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                        "rank": "normal",
                        "property": {
                          "id": "P1628",
                          "data_type": "url"
                        },
                        "value": {
                          "type": "value",
                          "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "statement-group-property-id-mismatch": {
                    "value": {
                      "code": "statement-group-property-id-mismatch",
                      "message": "Statement's Property ID does not match the Statement group key",
                      "context": {
                        "path": "{property_id_key}/{index}/property/id",
                        "statement_group_property_id": "{property_id_key}",
                        "statement_property_id": "{property_id_value}"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "invalid-key": {
                    "value": {
                      "code": "invalid-key",
                      "message": "Invalid key '{key}' in '{json_pointer_to_parent}'",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "key": "{key}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "422": {
            "description": "The edit request violates data policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}": {
      "get": {
        "operationId": "getProperty",
        "tags": [
          "properties"
        ],
        "summary": "Retrieve a single Wikibase Property by ID",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "query",
            "name": "_fields",
            "description": "Comma-separated list of fields to include in each response object.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "type",
                  "data_type",
                  "labels",
                  "descriptions",
                  "aliases",
                  "statements"
                ]
              }
            },
            "explode": false,
            "style": "form"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A single Wikibase Property",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "property",
                          "readOnly": true
                        },
                        "data_type": {
                          "type": "string"
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "data_type"
                      ]
                    },
                    {
                      "required": [
                        "id",
                        "type",
                        "data_type",
                        "labels",
                        "descriptions",
                        "aliases",
                        "statements"
                      ],
                      "properties": {
                        "statements": {
                          "additionalProperties": {
                            "items": {
                              "allOf": [
                                {
                                  "required": [
                                    "property",
                                    "value"
                                  ],
                                  "properties": {
                                    "property": {
                                      "required": [
                                        "id",
                                        "data_type"
                                      ]
                                    },
                                    "value": {
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "required": [
                                    "id",
                                    "rank",
                                    "qualifiers",
                                    "references"
                                  ],
                                  "properties": {
                                    "qualifiers": {
                                      "items": {
                                        "required": [
                                          "property",
                                          "value"
                                        ],
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "references": {
                                      "items": {
                                        "required": [
                                          "hash",
                                          "parts"
                                        ],
                                        "properties": {
                                          "parts": {
                                            "items": {
                                              "required": [
                                                "property",
                                                "value"
                                              ],
                                              "properties": {
                                                "property": {
                                                  "required": [
                                                    "id",
                                                    "data_type"
                                                  ]
                                                },
                                                "value": {
                                                  "required": [
                                                    "type"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "id": "P694",
                  "type": "property",
                  "data_type": "wikibase-item",
                  "labels": {
                    "en": "instance of",
                    "ru": "это частный случай понятия"
                  },
                  "descriptions": {
                    "en": "the subject is a concrete object (instance) of this class, category, or object group",
                    "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории."
                  },
                  "aliases": {
                    "en": [
                      "is a",
                      "is an"
                    ],
                    "ru": [
                      "представляет собой",
                      "является"
                    ]
                  },
                  "statements": {
                    "P1628": [
                      {
                        "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                        "rank": "normal",
                        "property": {
                          "id": "P1628",
                          "data_type": "url"
                        },
                        "value": {
                          "type": "value",
                          "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-query-parameter": {
                    "value": {
                      "code": "invalid-query-parameter",
                      "message": "Invalid query parameter: '{parameter}'",
                      "context": {
                        "parameter": "{parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchProperty",
        "tags": [
          "properties"
        ],
        "summary": "Change a single Wikibase Property by ID",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/aliases/en/-",
                    "value": "is an"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "add 'is an' as an English alias"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/aliases/en/-",
                    "value": "is an"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "add 'is an' as an English alias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A single Wikibase Property",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "property",
                          "readOnly": true
                        },
                        "data_type": {
                          "type": "string"
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "data_type"
                      ]
                    },
                    {
                      "required": [
                        "id",
                        "type",
                        "data_type",
                        "labels",
                        "descriptions",
                        "aliases",
                        "statements"
                      ],
                      "properties": {
                        "statements": {
                          "additionalProperties": {
                            "items": {
                              "allOf": [
                                {
                                  "required": [
                                    "property",
                                    "value"
                                  ],
                                  "properties": {
                                    "property": {
                                      "required": [
                                        "id",
                                        "data_type"
                                      ]
                                    },
                                    "value": {
                                      "required": [
                                        "type"
                                      ]
                                    }
                                  }
                                },
                                {
                                  "required": [
                                    "id",
                                    "rank",
                                    "qualifiers",
                                    "references"
                                  ],
                                  "properties": {
                                    "qualifiers": {
                                      "items": {
                                        "required": [
                                          "property",
                                          "value"
                                        ],
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    },
                                    "references": {
                                      "items": {
                                        "required": [
                                          "hash",
                                          "parts"
                                        ],
                                        "properties": {
                                          "parts": {
                                            "items": {
                                              "required": [
                                                "property",
                                                "value"
                                              ],
                                              "properties": {
                                                "property": {
                                                  "required": [
                                                    "id",
                                                    "data_type"
                                                  ]
                                                },
                                                "value": {
                                                  "required": [
                                                    "type"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "example": {
                  "id": "P694",
                  "type": "property",
                  "data_type": "wikibase-item",
                  "labels": {
                    "en": "instance of",
                    "ru": "это частный случай понятия"
                  },
                  "descriptions": {
                    "en": "the subject is a concrete object (instance) of this class, category, or object group",
                    "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории."
                  },
                  "aliases": {
                    "en": [
                      "is a",
                      "is an"
                    ],
                    "ru": [
                      "представляет собой",
                      "является"
                    ]
                  },
                  "statements": {
                    "P1628": [
                      {
                        "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                        "rank": "normal",
                        "property": {
                          "id": "P1628",
                          "data_type": "url"
                        },
                        "value": {
                          "type": "value",
                          "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                        },
                        "qualifiers": [],
                        "references": []
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in an invalid Property",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-missing-field": {
                    "value": {
                      "code": "patch-result-missing-field",
                      "message": "Required field missing in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "patched-statement-group-property-id-mismatch": {
                    "value": {
                      "code": "patched-statement-group-property-id-mismatch",
                      "message": "Statement's Property ID does not match the Statement group key",
                      "context": {
                        "path": "{property_id_key}/{index}/property/id",
                        "statement_group_property_id": "{property_id_key}",
                        "statement_property_id": "{property_id_value}"
                      }
                    }
                  },
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-referenced-resource-not-found": {
                    "value": {
                      "code": "patch-result-referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer_to_missing_resource_in_patch_result}",
                        "value": "{value}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "patch-result-modified-read-only-value": {
                    "value": {
                      "code": "patch-result-modified-read-only-value",
                      "message": "Read only value in patch result cannot be modified",
                      "context": {
                        "path": "{json_pointer_to_readonly_value}"
                      }
                    }
                  },
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/descriptions": {
      "get": {
        "operationId": "getItemDescriptions",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve an Item's descriptions",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Item's descriptions by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "famous person",
                  "ru": "известная личность"
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchItemDescriptions",
        "tags": [
          "descriptions"
        ],
        "summary": "Change an Item's descriptions",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to an Item's descriptions and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "famous person"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "update English description"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "famous person"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "update English description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item's descriptions by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "famous person",
                  "ru": "известная личность"
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  },
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in invalid descriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/descriptions": {
      "get": {
        "operationId": "getPropertyDescriptions",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve a Property's descriptions",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Property's descriptions by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "the subject is a concrete object (instance) of this class, category, or object group",
                  "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории"
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchPropertyDescriptions",
        "tags": [
          "descriptions"
        ],
        "summary": "Change a Property's descriptions",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to a Property's descriptions and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "the subject is a concrete object (instance) of this class, category, or object group"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "update English description"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "the subject is a concrete object (instance) of this class, category, or object group"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "update English description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Property's descriptions by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "the subject is a concrete object (instance) of this class, category, or object group",
                  "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории"
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in invalid descriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/descriptions/{language_code}": {
      "get": {
        "operationId": "getItemDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve an Item's description in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Item's description in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "famous person"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "replaceItemDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Add / Replace an Item's description in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing Item description in the specified language and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "description"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "description": "famous person",
                "tags": [],
                "bot": false,
                "comment": "set English description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated description",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "famous person"
              }
            }
          },
          "201": {
            "description": "The newly added description",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "famous person"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "The edit request violates data policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteItemDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Delete an Item's description in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The description was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Description deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/descriptions_with_language_fallback/{language_code}": {
      "get": {
        "operationId": "getItemDescriptionWithFallback",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve an Item's description in a specific language, with language fallback",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Item's description in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "famous person"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "307": {
            "description": "The specified resource has temporarily moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/descriptions/{language_code}": {
      "get": {
        "operationId": "getPropertyDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve a Property's description in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Property's description in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "the subject is a concrete object (instance) of this class, category, or object group"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "setPropertyDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Add / Replace a Property's description in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing Property description in the specified language and edit metadata",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "description": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "description"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "description": "the subject is a concrete object (instance) of this class, category, or object group",
                "tags": [],
                "bot": false,
                "comment": "set English description"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated description",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "the subject is a concrete object (instance) of this class, category, or object group"
              }
            }
          },
          "201": {
            "description": "The newly added description",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "the subject is a concrete object (instance) of this class, category, or object group"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "The edit request violates data policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePropertyDescription",
        "tags": [
          "descriptions"
        ],
        "summary": "Delete a Property's description in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The description was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Description deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/descriptions_with_language_fallback/{language_code}": {
      "get": {
        "operationId": "getPropertyDescriptionWithFallback",
        "tags": [
          "descriptions"
        ],
        "summary": "Retrieve a Property's description in a specific language, with language fallback",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Property's description in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "the subject is a concrete object (instance) of this class, category, or object group"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "307": {
            "description": "The specified resource has temporarily moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/statements": {
      "get": {
        "operationId": "getItemStatements",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve Statements from an Item",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "query",
            "name": "property",
            "description": "Single Property ID to filter Statements by.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "style": "form",
            "example": "P1628"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "The Statements of an Item",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The globally unique identifier for this Statement",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "rank": {
                                  "description": "The rank of the Statement",
                                  "type": "string",
                                  "enum": [
                                    "deprecated",
                                    "normal",
                                    "preferred"
                                  ],
                                  "default": "normal"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "qualifiers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                },
                                "references": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "hash": {
                                        "description": "Hash of the Reference",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "parts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "properties": {
                                "property": {
                                  "required": [
                                    "id",
                                    "data_type"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              },
                              "required": [
                                "property",
                                "value"
                              ]
                            },
                            {
                              "properties": {
                                "qualifiers": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                },
                                "references": {
                                  "properties": {
                                    "parts": {
                                      "items": {
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "property",
                                          "value"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "hash",
                                    "parts"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "rank",
                                "qualifiers",
                                "references"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "P694": [
                    {
                      "id": "Q24$BB728546-A400-4116-A772-16D54B62AC2B",
                      "rank": "normal",
                      "property": {
                        "id": "P694",
                        "data_type": "wikibase-item"
                      },
                      "value": {
                        "type": "value",
                        "content": "Q626683"
                      },
                      "qualifiers": [],
                      "references": []
                    }
                  ],
                  "P476": [
                    {
                      "id": "Q24$F3B2F956-B6AB-4984-8D89-BEE0FFFA3385",
                      "rank": "normal",
                      "property": {
                        "id": "P476",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+1986-01-27T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      },
                      "qualifiers": [],
                      "references": []
                    }
                  ],
                  "P17": [
                    {
                      "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                      "rank": "normal",
                      "property": {
                        "id": "P17",
                        "data_type": "string"
                      },
                      "value": {
                        "type": "value",
                        "content": "Senior Team Supervisor"
                      },
                      "qualifiers": [
                        {
                          "property": {
                            "id": "P706",
                            "data_type": "time"
                          },
                          "value": {
                            "type": "value",
                            "content": {
                              "time": "+2023-06-13T00:00:00Z",
                              "precision": 11,
                              "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                            }
                          }
                        }
                      ],
                      "references": [
                        {
                          "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                          "parts": [
                            {
                              "property": {
                                "id": "P709",
                                "data_type": "url"
                              },
                              "value": {
                                "type": "value",
                                "content": "https://news.example.org"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-query-parameter": {
                    "value": {
                      "code": "invalid-query-parameter",
                      "message": "Invalid query parameter: '{parameter}'",
                      "context": {
                        "parameter": "{parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Add a new Statement to an Item",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Statement object and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statement": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The globally unique identifier for this Statement",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "rank": {
                                    "description": "The rank of the Statement",
                                    "type": "string",
                                    "enum": [
                                      "deprecated",
                                      "normal",
                                      "preferred"
                                    ],
                                    "default": "normal"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "qualifiers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  },
                                  "references": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "description": "Hash of the Reference",
                                          "type": "string",
                                          "readOnly": true
                                        },
                                        "parts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "property": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "description": "The ID of the Property",
                                                    "type": "string"
                                                  },
                                                  "data_type": {
                                                    "description": "The data type of the Property",
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "readOnly": true
                                                  }
                                                }
                                              },
                                              "value": {
                                                "type": "object",
                                                "properties": {
                                                  "content": {
                                                    "description": "The value, if type == \"value\", otherwise omitted"
                                                  },
                                                  "type": {
                                                    "description": "The value type",
                                                    "type": "string",
                                                    "enum": [
                                                      "value",
                                                      "somevalue",
                                                      "novalue"
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "qualifiers": {
                                    "items": {
                                      "properties": {
                                        "property": {
                                          "required": [
                                            "id"
                                          ]
                                        },
                                        "value": {
                                          "required": [
                                            "type"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "property",
                                        "value"
                                      ]
                                    }
                                  },
                                  "references": {
                                    "items": {
                                      "properties": {
                                        "parts": {
                                          "items": {
                                            "properties": {
                                              "property": {
                                                "required": [
                                                  "id"
                                                ]
                                              },
                                              "value": {
                                                "required": [
                                                  "type"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "property",
                                              "value"
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "parts"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "statement"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "statement": {
                  "property": {
                    "id": "P17"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "parts": [
                        {
                          "property": {
                            "id": "P709"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created Statement. Please note that the value of the `ETag` header field refers to the Item's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Location": {
                "description": "The URI of the newly created Statement",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/statements/{statement_id}": {
      "get": {
        "operationId": "getItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve a single Statement from an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on an Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Statement. Please note that the value of the `ETag` header field refers to the Item's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "item-statement-id-mismatch": {
                    "value": {
                      "code": "item-statement-id-mismatch",
                      "message": "IDs of the Item and the Statement do not match",
                      "context": {
                        "item_id": "{item_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "replaceItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Replace a single Statement of an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on an Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Statement object and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statement": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The globally unique identifier for this Statement",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "rank": {
                                    "description": "The rank of the Statement",
                                    "type": "string",
                                    "enum": [
                                      "deprecated",
                                      "normal",
                                      "preferred"
                                    ],
                                    "default": "normal"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "qualifiers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  },
                                  "references": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "description": "Hash of the Reference",
                                          "type": "string",
                                          "readOnly": true
                                        },
                                        "parts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "property": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "description": "The ID of the Property",
                                                    "type": "string"
                                                  },
                                                  "data_type": {
                                                    "description": "The data type of the Property",
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "readOnly": true
                                                  }
                                                }
                                              },
                                              "value": {
                                                "type": "object",
                                                "properties": {
                                                  "content": {
                                                    "description": "The value, if type == \"value\", otherwise omitted"
                                                  },
                                                  "type": {
                                                    "description": "The value type",
                                                    "type": "string",
                                                    "enum": [
                                                      "value",
                                                      "somevalue",
                                                      "novalue"
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "qualifiers": {
                                    "items": {
                                      "properties": {
                                        "property": {
                                          "required": [
                                            "id"
                                          ]
                                        },
                                        "value": {
                                          "required": [
                                            "type"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "property",
                                        "value"
                                      ]
                                    }
                                  },
                                  "references": {
                                    "items": {
                                      "properties": {
                                        "parts": {
                                          "items": {
                                            "properties": {
                                              "property": {
                                                "required": [
                                                  "id"
                                                ]
                                              },
                                              "value": {
                                                "required": [
                                                  "type"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "property",
                                              "value"
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "parts"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "statement"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "statement": {
                  "property": {
                    "id": "P17"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "parts": [
                        {
                          "property": {
                            "id": "P709"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Wikibase Statement. Please note that the value of the `ETag` header field refers to the Item's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "item-statement-id-mismatch": {
                    "value": {
                      "code": "item-statement-id-mismatch",
                      "message": "IDs of the Item and the Statement do not match",
                      "context": {
                        "item_id": "{item_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "cannot-modify-read-only-value": {
                    "value": {
                      "code": "cannot-modify-read-only-value",
                      "message": "The input value cannot be modified",
                      "context": {
                        "path": "{readonly_value_pointer}"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Change elements of a single Statement of an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`.",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on an Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to the Statement and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/references/-",
                    "value": {
                      "parts": [
                        {
                          "property": {
                            "id": "P709"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add reference to Statement"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/references/-",
                    "value": {
                      "parts": [
                        {
                          "property": {
                            "id": "P709"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add reference to Statement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Wikibase Statement. Please note that the value of the `ETag` header field refers to the Item's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "item-statement-id-mismatch": {
                    "value": {
                      "code": "item-statement-id-mismatch",
                      "message": "IDs of the Item and the Statement do not match",
                      "context": {
                        "item_id": "{item_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in an invalid Statement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-missing-field": {
                    "value": {
                      "code": "patch-result-missing-field",
                      "message": "Required field missing in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-modified-read-only-value": {
                    "value": {
                      "code": "patch-result-modified-read-only-value",
                      "message": "Read only value in patch result cannot be modified",
                      "context": {
                        "path": "{json_pointer_to_readonly_value}"
                      }
                    }
                  },
                  "patch-result-referenced-resource-not-found": {
                    "value": {
                      "code": "patch-result-referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer_to_missing_resource_in_patch_result}",
                        "value": "{value}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteItemStatement",
        "tags": [
          "statements"
        ],
        "summary": "Delete a single Statement from an Item",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on an Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested Statement was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Statement deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "item-statement-id-mismatch": {
                    "value": {
                      "code": "item-statement-id-mismatch",
                      "message": "IDs of the Item and the Statement do not match",
                      "context": {
                        "item_id": "{item_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/labels": {
      "get": {
        "operationId": "getItemLabels",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve an Item's labels",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Item's labels by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "Jane Doe",
                  "ru": "Джейн Доу"
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchItemLabels",
        "tags": [
          "labels"
        ],
        "summary": "Change an Item's Labels",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to Labels and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "Jane Doe"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "replace English label"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "Jane Doe"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "replace English label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item's labels by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "Jane Doe",
                  "ru": "Джейн Доу"
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  },
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in invalid Labels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/labels": {
      "get": {
        "operationId": "getPropertyLabels",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve a Property's labels",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Property's labels by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "instance of",
                  "ru": "это частный случай понятия"
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchPropertyLabels",
        "tags": [
          "labels"
        ],
        "summary": "Change a Property's Labels",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to Labels and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "instance of"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "replace English label"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/en",
                    "value": "instance of"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "replace English label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Property's labels by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                },
                "example": {
                  "en": "instance of",
                  "ru": "это частный случай понятия"
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in invalid Labels",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/labels/{language_code}": {
      "get": {
        "operationId": "getItemLabel",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve an Item's label in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Jane Doe"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "replaceItemLabel",
        "tags": [
          "labels"
        ],
        "summary": "Add / Replace an Item's label in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing an Item label in the specified language and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "label"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "label": "Jane Doe",
                "tags": [],
                "bot": false,
                "comment": "Update the English label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Jane Doe"
              }
            }
          },
          "201": {
            "description": "The newly added Label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Jane Doe"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "The edit request violates data policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteItemLabel",
        "tags": [
          "labels"
        ],
        "summary": "Delete an Item's label in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resource was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Label deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/labels_with_language_fallback/{language_code}": {
      "get": {
        "operationId": "getItemLabelWithFallback",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve an Item's label in a specific language, with language fallback",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Jane Doe"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "307": {
            "description": "The specified resource has temporarily moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/labels/{language_code}": {
      "get": {
        "operationId": "getPropertyLabel",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve a Property's label in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "instance of"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "replacePropertyLabel",
        "tags": [
          "labels"
        ],
        "summary": "Add / Replace a Property's label in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing a Property label in the specified language and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string"
                      }
                    },
                    "required": [
                      "label"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "label": "instance of",
                "tags": [],
                "bot": false,
                "comment": "Update the English label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated Label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "instance of"
              }
            }
          },
          "201": {
            "description": "The newly added Label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "instance of"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "The edit request violates data policy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "data-policy-violation": {
                    "value": {
                      "code": "data-policy-violation",
                      "message": "Edit violates data policy",
                      "context": {
                        "violation": "{violation_code}",
                        "violation_context": {
                          "some": "context"
                        }
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePropertyLabel",
        "tags": [
          "labels"
        ],
        "summary": "Delete a Property's label in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The resource was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Label deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/labels_with_language_fallback/{language_code}": {
      "get": {
        "operationId": "getPropertyLabelWithFallback",
        "tags": [
          "labels"
        ],
        "summary": "Retrieve a Property's label in a specific language, with language fallback",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "A label in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "instance of"
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "307": {
            "description": "The specified resource has temporarily moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/aliases": {
      "get": {
        "operationId": "getItemAliases",
        "tags": [
          "aliases"
        ],
        "summary": "Retrieve an Item's aliases",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Item's aliases by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "en": [
                    "Jane M. Doe",
                    "JD"
                  ],
                  "ru": [
                    "Джейн М. Доу"
                  ]
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchItemAliases",
        "tags": [
          "aliases"
        ],
        "summary": "Change an Item's aliases",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to an Item's aliases and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/en/-",
                    "value": "JD"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add English alias"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/en/-",
                    "value": "JD"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add English alias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Item's aliases by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "en": [
                    "Jane M. Doe",
                    "JD"
                  ],
                  "ru": [
                    "Джейн М. Доу"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  },
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in invalid Aliases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/aliases": {
      "get": {
        "operationId": "getPropertyAliases",
        "tags": [
          "aliases"
        ],
        "summary": "Retrieve a Property's aliases",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Property's aliases by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "en": [
                    "is a",
                    "is an"
                  ],
                  "ru": [
                    "представляет собой",
                    "является"
                  ]
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchPropertyAliases",
        "tags": [
          "aliases"
        ],
        "summary": "Change a Property's aliases",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to a Property's aliases and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/en/-",
                    "value": "is an"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add English alias"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/en/-",
                    "value": "is an"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add English alias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Property's aliases by language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "example": {
                  "en": [
                    "is a",
                    "is an"
                  ],
                  "ru": [
                    "представляет собой",
                    "является"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in invalid Aliases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-invalid-key": {
                    "value": {
                      "code": "patch-result-invalid-key",
                      "message": "Invalid key in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent_in_patch_result}",
                        "key": "{key}"
                      }
                    }
                  },
                  "patch-result-value-too-long": {
                    "value": {
                      "code": "patch-result-value-too-long",
                      "message": "Patched value is too long",
                      "context": {
                        "path": "{json_pointer_to_patched_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/items/{item_id}/aliases/{language_code}": {
      "get": {
        "operationId": "getItemAliasesInLanguage",
        "tags": [
          "aliases"
        ],
        "summary": "Retrieve an Item's aliases in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Item's aliases in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "Jane M. Doe",
                  "JD"
                ]
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "308": {
            "description": "The specified resource has permanently moved to the indicated location",
            "headers": {
              "Location": {
                "description": "The URL to which the requested resource has been moved",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addItemAliasesInLanguage",
        "tags": [
          "aliases"
        ],
        "summary": "Create / Add an Item's aliases in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "item_id",
            "description": "The ID of the required Item",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^Q[1-9]\\d{0,9}$"
            },
            "example": "Q24"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing a list of Item aliases in the specified language and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "aliases": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "aliases"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "aliases": [
                  "JD"
                ],
                "tags": [],
                "bot": false,
                "comment": "Add English alias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated list of aliases in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "Jane M. Doe",
                  "JD"
                ]
              }
            }
          },
          "201": {
            "description": "The newly created list of aliases in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "Jane M. Doe",
                  "JD"
                ]
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The specified Item was redirected",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "redirected-item": {
                    "value": {
                      "code": "redirected-item",
                      "message": "Item {item_id} has been redirected to {redirect_target_id}",
                      "context": {
                        "redirect_target": "{redirect_target_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/aliases/{language_code}": {
      "get": {
        "operationId": "getPropertyAliasesInLanguage",
        "tags": [
          "aliases"
        ],
        "summary": "Retrieve a Property's aliases in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "Property's aliases in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "is a",
                  "is an"
                ]
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addPropertyAliasesInLanguage",
        "tags": [
          "aliases"
        ],
        "summary": "Create / Add a Property's aliases in a specific language",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "language_code",
            "description": "The requested resource language",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^[a-z]{2}[a-z0-9-]*$"
            },
            "example": "en"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "requestBody": {
          "description": "Payload containing a list of Wikibase aliases in the specified language and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "aliases": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "aliases"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "aliases": [
                  "is an"
                ],
                "tags": [],
                "bot": false,
                "comment": "Add English alias"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated list of aliases in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "is a",
                  "is an"
                ]
              }
            }
          },
          "201": {
            "description": "The newly created list of aliases in a specific language",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "example": [
                  "is a",
                  "is an"
                ]
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/statements": {
      "get": {
        "operationId": "getPropertyStatements",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve Statements from a Property",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "query",
            "name": "property",
            "description": "Single Property ID to filter Statements by.",
            "required": false,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "style": "form",
            "example": "P1628"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "The Statements of a Property",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The globally unique identifier for this Statement",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "rank": {
                                  "description": "The rank of the Statement",
                                  "type": "string",
                                  "enum": [
                                    "deprecated",
                                    "normal",
                                    "preferred"
                                  ],
                                  "default": "normal"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "qualifiers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                },
                                "references": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "hash": {
                                        "description": "Hash of the Reference",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "parts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "properties": {
                                "property": {
                                  "required": [
                                    "id",
                                    "data_type"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              },
                              "required": [
                                "property",
                                "value"
                              ]
                            },
                            {
                              "properties": {
                                "qualifiers": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                },
                                "references": {
                                  "properties": {
                                    "parts": {
                                      "items": {
                                        "properties": {
                                          "property": {
                                            "required": [
                                              "id",
                                              "data_type"
                                            ]
                                          },
                                          "value": {
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        },
                                        "required": [
                                          "property",
                                          "value"
                                        ]
                                      }
                                    }
                                  },
                                  "required": [
                                    "hash",
                                    "parts"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "rank",
                                "qualifiers",
                                "references"
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "example": {
                  "P1628": [
                    {
                      "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                      "rank": "normal",
                      "property": {
                        "id": "P1628",
                        "data_type": "url"
                      },
                      "value": {
                        "type": "value",
                        "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                      },
                      "qualifiers": [],
                      "references": []
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-query-parameter": {
                    "value": {
                      "code": "invalid-query-parameter",
                      "message": "Invalid query parameter: '{parameter}'",
                      "context": {
                        "parameter": "{parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "post": {
        "operationId": "addPropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Add a new Statement to a Property",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Statement object and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statement": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The globally unique identifier for this Statement",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "rank": {
                                    "description": "The rank of the Statement",
                                    "type": "string",
                                    "enum": [
                                      "deprecated",
                                      "normal",
                                      "preferred"
                                    ],
                                    "default": "normal"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "qualifiers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  },
                                  "references": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "description": "Hash of the Reference",
                                          "type": "string",
                                          "readOnly": true
                                        },
                                        "parts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "property": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "description": "The ID of the Property",
                                                    "type": "string"
                                                  },
                                                  "data_type": {
                                                    "description": "The data type of the Property",
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "readOnly": true
                                                  }
                                                }
                                              },
                                              "value": {
                                                "type": "object",
                                                "properties": {
                                                  "content": {
                                                    "description": "The value, if type == \"value\", otherwise omitted"
                                                  },
                                                  "type": {
                                                    "description": "The value type",
                                                    "type": "string",
                                                    "enum": [
                                                      "value",
                                                      "somevalue",
                                                      "novalue"
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "qualifiers": {
                                    "items": {
                                      "properties": {
                                        "property": {
                                          "required": [
                                            "id"
                                          ]
                                        },
                                        "value": {
                                          "required": [
                                            "type"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "property",
                                        "value"
                                      ]
                                    }
                                  },
                                  "references": {
                                    "items": {
                                      "properties": {
                                        "parts": {
                                          "items": {
                                            "properties": {
                                              "property": {
                                                "required": [
                                                  "id"
                                                ]
                                              },
                                              "value": {
                                                "required": [
                                                  "type"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "property",
                                              "value"
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "parts"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "statement"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "statement": {
                  "property": {
                    "id": "P1628"
                  },
                  "value": {
                    "type": "value",
                    "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  }
                },
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The newly created Statement. Please note that the value of the `ETag` header field refers to the Property's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Location": {
                "description": "The URI of the newly created Statement",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                  "rank": "normal",
                  "property": {
                    "id": "P1628",
                    "data_type": "url"
                  },
                  "value": {
                    "type": "value",
                    "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  },
                  "qualifiers": [],
                  "references": []
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/entities/properties/{property_id}/statements/{statement_id}": {
      "get": {
        "operationId": "getPropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve a single Statement from a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on a Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Statement. Please note that the value of the `ETag` header field refers to the Property's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                  "rank": "normal",
                  "property": {
                    "id": "P1628",
                    "data_type": "url"
                  },
                  "value": {
                    "type": "value",
                    "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  },
                  "qualifiers": [],
                  "references": []
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "property-statement-id-mismatch": {
                    "value": {
                      "code": "property-statement-id-mismatch",
                      "message": "IDs of the Property and the Statement do not match",
                      "context": {
                        "property_id": "{property_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "replacePropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Replace a single Statement of a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on a Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Statement object and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statement": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The globally unique identifier for this Statement",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "rank": {
                                    "description": "The rank of the Statement",
                                    "type": "string",
                                    "enum": [
                                      "deprecated",
                                      "normal",
                                      "preferred"
                                    ],
                                    "default": "normal"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "qualifiers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  },
                                  "references": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "description": "Hash of the Reference",
                                          "type": "string",
                                          "readOnly": true
                                        },
                                        "parts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "property": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "description": "The ID of the Property",
                                                    "type": "string"
                                                  },
                                                  "data_type": {
                                                    "description": "The data type of the Property",
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "readOnly": true
                                                  }
                                                }
                                              },
                                              "value": {
                                                "type": "object",
                                                "properties": {
                                                  "content": {
                                                    "description": "The value, if type == \"value\", otherwise omitted"
                                                  },
                                                  "type": {
                                                    "description": "The value type",
                                                    "type": "string",
                                                    "enum": [
                                                      "value",
                                                      "somevalue",
                                                      "novalue"
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "qualifiers": {
                                    "items": {
                                      "properties": {
                                        "property": {
                                          "required": [
                                            "id"
                                          ]
                                        },
                                        "value": {
                                          "required": [
                                            "type"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "property",
                                        "value"
                                      ]
                                    }
                                  },
                                  "references": {
                                    "items": {
                                      "properties": {
                                        "parts": {
                                          "items": {
                                            "properties": {
                                              "property": {
                                                "required": [
                                                  "id"
                                                ]
                                              },
                                              "value": {
                                                "required": [
                                                  "type"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "property",
                                              "value"
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "parts"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "statement"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "statement": {
                  "property": {
                    "id": "P1628"
                  },
                  "value": {
                    "type": "value",
                    "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  }
                },
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Wikibase Statement. Please note that the value of the `ETag` header field refers to the Property's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                  "rank": "normal",
                  "property": {
                    "id": "P1628",
                    "data_type": "url"
                  },
                  "value": {
                    "type": "value",
                    "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  },
                  "qualifiers": [],
                  "references": []
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "property-statement-id-mismatch": {
                    "value": {
                      "code": "property-statement-id-mismatch",
                      "message": "IDs of the Property and the Statement do not match",
                      "context": {
                        "property_id": "{property_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "cannot-modify-read-only-value": {
                    "value": {
                      "code": "cannot-modify-read-only-value",
                      "message": "The input value cannot be modified",
                      "context": {
                        "path": "{readonly_value_pointer}"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchPropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Change elements of a single Statement of a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`.",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on a Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to the Statement and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/value/content",
                    "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Update value of the 'equivalent property' Statement"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "replace",
                    "path": "/value/content",
                    "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Update value of the 'equivalent property' Statement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Wikibase Statement. Please note that the value of the `ETag` header field refers to the Property's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                  "rank": "normal",
                  "property": {
                    "id": "P1628",
                    "data_type": "url"
                  },
                  "value": {
                    "type": "value",
                    "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  },
                  "qualifiers": [],
                  "references": []
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "property-statement-id-mismatch": {
                    "value": {
                      "code": "property-statement-id-mismatch",
                      "message": "IDs of the Property and the Statement do not match",
                      "context": {
                        "property_id": "{property_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in an invalid Statement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-missing-field": {
                    "value": {
                      "code": "patch-result-missing-field",
                      "message": "Required field missing in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-modified-read-only-value": {
                    "value": {
                      "code": "patch-result-modified-read-only-value",
                      "message": "Read only value in patch result cannot be modified",
                      "context": {
                        "path": "{json_pointer_to_readonly_value}"
                      }
                    }
                  },
                  "patch-result-referenced-resource-not-found": {
                    "value": {
                      "code": "patch-result-referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer_to_missing_resource_in_patch_result}",
                        "value": "{value}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deletePropertyStatement",
        "tags": [
          "statements"
        ],
        "summary": "Delete a single Statement from a Property",
        "description": "This endpoint is also accessible through `/statements/{statement_id}`.",
        "parameters": [
          {
            "in": "path",
            "name": "property_id",
            "description": "The ID of the required Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^P[1-9]\\d{0,9}$"
            },
            "example": "P694"
          },
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement on a Property",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested Statement was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Statement deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "property-statement-id-mismatch": {
                    "value": {
                      "code": "property-statement-id-mismatch",
                      "message": "IDs of the Property and the Statement do not match",
                      "context": {
                        "property_id": "{property_id}",
                        "statement_id": "{statement_id}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    },
    "/statements/{statement_id}": {
      "get": {
        "operationId": "getStatement",
        "tags": [
          "statements"
        ],
        "summary": "Retrieve a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q|P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Modified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Make authenticated request using a provided bearer token",
            "schema": {
              "type": "string"
            },
            "example": "Bearer mF_9.B5f-4.1JqM"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested Statement. Please note that the value of the `ETag` header field refers to the subject's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "304": {
            "description": "The specified resource has not been modified since last provided revision number or date",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "put": {
        "operationId": "replaceStatement",
        "tags": [
          "statements"
        ],
        "summary": "Replace a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q|P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a Wikibase Statement object and edit metadata",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "statement": {
                        "allOf": [
                          {
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The globally unique identifier for this Statement",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "rank": {
                                    "description": "The rank of the Statement",
                                    "type": "string",
                                    "enum": [
                                      "deprecated",
                                      "normal",
                                      "preferred"
                                    ],
                                    "default": "normal"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "qualifiers": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  },
                                  "references": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "hash": {
                                          "description": "Hash of the Reference",
                                          "type": "string",
                                          "readOnly": true
                                        },
                                        "parts": {
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "property": {
                                                "type": "object",
                                                "properties": {
                                                  "id": {
                                                    "description": "The ID of the Property",
                                                    "type": "string"
                                                  },
                                                  "data_type": {
                                                    "description": "The data type of the Property",
                                                    "type": [
                                                      "string",
                                                      "null"
                                                    ],
                                                    "readOnly": true
                                                  }
                                                }
                                              },
                                              "value": {
                                                "type": "object",
                                                "properties": {
                                                  "content": {
                                                    "description": "The value, if type == \"value\", otherwise omitted"
                                                  },
                                                  "type": {
                                                    "description": "The value type",
                                                    "type": "string",
                                                    "enum": [
                                                      "value",
                                                      "somevalue",
                                                      "novalue"
                                                    ]
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "default": []
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              },
                              {
                                "properties": {
                                  "qualifiers": {
                                    "items": {
                                      "properties": {
                                        "property": {
                                          "required": [
                                            "id"
                                          ]
                                        },
                                        "value": {
                                          "required": [
                                            "type"
                                          ]
                                        }
                                      },
                                      "required": [
                                        "property",
                                        "value"
                                      ]
                                    }
                                  },
                                  "references": {
                                    "items": {
                                      "properties": {
                                        "parts": {
                                          "items": {
                                            "properties": {
                                              "property": {
                                                "required": [
                                                  "id"
                                                ]
                                              },
                                              "value": {
                                                "required": [
                                                  "type"
                                                ]
                                              }
                                            },
                                            "required": [
                                              "property",
                                              "value"
                                            ]
                                          }
                                        }
                                      },
                                      "required": [
                                        "parts"
                                      ]
                                    }
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    },
                    "required": [
                      "statement"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "statement": {
                  "property": {
                    "id": "P17"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "parts": [
                        {
                          "property": {
                            "id": "P709"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                },
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Wikibase Statement. Please note that the value of the ETag header field refers to the subject's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "cannot-modify-read-only-value": {
                    "value": {
                      "code": "cannot-modify-read-only-value",
                      "message": "The input value cannot be modified",
                      "context": {
                        "path": "{readonly_value_pointer}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  },
                  "referenced-resource-not-found": {
                    "value": {
                      "code": "referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "patchStatement",
        "tags": [
          "statements"
        ],
        "summary": "Change elements of a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q|P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Payload containing a JSON Patch document to be applied to the Statement and edit metadata",
          "required": true,
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/references/-",
                    "value": {
                      "parts": [
                        {
                          "property": {
                            "id": "P709"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add reference to Statement"
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "patch": {
                        "description": "A JSON Patch document as defined by RFC 6902",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "op": {
                              "description": "The operation to perform",
                              "type": "string",
                              "enum": [
                                "add",
                                "copy",
                                "move",
                                "remove",
                                "replace",
                                "test"
                              ]
                            },
                            "path": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "from": {
                              "description": "A JSON Pointer",
                              "type": "string"
                            },
                            "value": {
                              "description": "The value to be used within the operation"
                            }
                          },
                          "required": [
                            "op",
                            "path"
                          ]
                        }
                      }
                    },
                    "required": [
                      "patch"
                    ]
                  },
                  {
                    "type": "object",
                    "properties": {
                      "tags": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "default": []
                      },
                      "bot": {
                        "type": "boolean",
                        "default": false
                      },
                      "comment": {
                        "type": "string"
                      }
                    }
                  }
                ]
              },
              "example": {
                "patch": [
                  {
                    "op": "add",
                    "path": "/references/-",
                    "value": {
                      "parts": [
                        {
                          "property": {
                            "id": "P709"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  }
                ],
                "tags": [],
                "bot": false,
                "comment": "Add reference to Statement"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A Wikibase Statement. Please note that the value of the `ETag` header field refers to the subject's revision ID.",
            "headers": {
              "ETag": {
                "description": "Last entity revision number",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "Last-Modified": {
                "description": "Last modified date",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                },
                "example": {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "The provided JSON Patch request is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "missing-field": {
                    "value": {
                      "code": "missing-field",
                      "message": "Required field missing",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  },
                  "resource-too-large": {
                    "value": {
                      "code": "resource-too-large",
                      "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                      "context": {
                        "limit": "configured_limit_as_int"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "409": {
            "description": "The provided JSON Patch cannot be applied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-test-failed": {
                    "value": {
                      "code": "patch-test-failed",
                      "message": "Test operation in the provided patch failed",
                      "context": {
                        "path": "{json_pointer_to_patch_operation}",
                        "actual_value": "actual value"
                      }
                    }
                  },
                  "patch-target-not-found": {
                    "value": {
                      "code": "patch-target-not-found",
                      "message": "Target not found on resource",
                      "context": {
                        "path": "{json_pointer_to_target_in_patch}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "422": {
            "description": "Applying the provided JSON Patch results in an invalid Statement",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "patch-result-missing-field": {
                    "value": {
                      "code": "patch-result-missing-field",
                      "message": "Required field missing in patch result",
                      "context": {
                        "path": "{json_pointer_to_parent}",
                        "field": "{missing_field}"
                      }
                    }
                  },
                  "patch-result-invalid-value": {
                    "value": {
                      "code": "patch-result-invalid-value",
                      "message": "Invalid value in patch result",
                      "context": {
                        "value": "{value}",
                        "path": "{path}"
                      }
                    }
                  },
                  "patch-result-modified-read-only-value": {
                    "value": {
                      "code": "patch-result-modified-read-only-value",
                      "message": "Read only value in patch result cannot be modified",
                      "context": {
                        "path": "{json_pointer_to_readonly_value}"
                      }
                    }
                  },
                  "patch-result-referenced-resource-not-found": {
                    "value": {
                      "code": "patch-result-referenced-resource-not-found",
                      "message": "The referenced resource does not exist",
                      "context": {
                        "path": "{json_pointer_to_missing_resource_in_patch_result}",
                        "value": "{value}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "deleteStatement",
        "tags": [
          "statements"
        ],
        "summary": "Delete a single Statement",
        "description": "This endpoint is also accessible through `/entities/items/{item_id}/statements/{statement_id}` and `/entities/properties/{property_id}/statements/{statement_id}`",
        "parameters": [
          {
            "in": "path",
            "name": "statement_id",
            "description": "The ID of a Statement",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^(Q|q|P|p)[1-9]\\d{0,9}\\$.+$"
            },
            "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-None-Match",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^(?:\".+\"|\\*)$"
              }
            },
            "example": [
              "\"1276705620\""
            ]
          },
          {
            "name": "If-Unmodified-Since",
            "in": "header",
            "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
            "schema": {
              "type": "string",
              "format": "http-date"
            },
            "example": "Sat, 06 Jun 2020 16:38:47 GMT"
          }
        ],
        "requestBody": {
          "description": "Edit payload containing edit metadata",
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": []
                  },
                  "bot": {
                    "type": "boolean",
                    "default": false
                  },
                  "comment": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "tags": [],
                "bot": false,
                "comment": "Example edit using the Wikibase REST API"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The requested Statement was deleted",
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which response is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              },
              "X-Authenticated-User": {
                "description": "Optional username of the user making the request",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                },
                "example": "Statement deleted"
              }
            }
          },
          "400": {
            "description": "The request cannot be processed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "invalid-path-parameter": {
                    "value": {
                      "code": "invalid-path-parameter",
                      "message": "Invalid path parameter: '{path_parameter}'",
                      "context": {
                        "parameter": "{path_parameter}"
                      }
                    }
                  },
                  "invalid-value": {
                    "value": {
                      "code": "invalid-value",
                      "message": "Invalid value at '{json_pointer}'",
                      "context": {
                        "path": "{json_pointer}"
                      }
                    }
                  },
                  "value-too-long": {
                    "value": {
                      "code": "value-too-long",
                      "message": "The input value is too long",
                      "context": {
                        "path": "{json_pointer_to_element}",
                        "limit": "{configured_limit}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "403": {
            "description": "The access to resource was denied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "permission-denied": {
                    "value": {
                      "code": "permission-denied",
                      "message": "Access to resource is denied",
                      "context": {
                        "denial_reason": "{reason_code}",
                        "denial_context": "{additional_context}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "404": {
            "description": "The specified resource was not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "resource-not-found": {
                    "value": {
                      "code": "resource-not-found",
                      "message": "The requested resource does not exist",
                      "context": {
                        "resource_type": "{resource_type}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "412": {
            "description": "The condition defined by a conditional request header is not fulfilled"
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "examples": {
                  "request-limit-reached": {
                    "value": {
                      "code": "request-limit-reached",
                      "message": "Exceeded the limit of actions that can be performed in a given span of time",
                      "context": {
                        "reason": "{reason_code}"
                      }
                    }
                  }
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          },
          "500": {
            "description": "An unexpected error has occurred",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "code": {
                      "type": "string"
                    },
                    "message": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  },
                  "required": [
                    "code",
                    "message"
                  ]
                },
                "example": {
                  "code": "unexpected-error",
                  "message": "Unexpected Error"
                }
              }
            },
            "headers": {
              "Content-Language": {
                "description": "Language code of the language in which error message is provided",
                "schema": {
                  "type": "string"
                },
                "required": true
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Authorization": {
        "name": "Authorization",
        "in": "header",
        "description": "Make authenticated request using a provided bearer token",
        "schema": {
          "type": "string"
        },
        "example": "Bearer mF_9.B5f-4.1JqM"
      },
      "ItemId": {
        "in": "path",
        "name": "item_id",
        "description": "The ID of the required Item",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^Q[1-9]\\d{0,9}$"
        },
        "example": "Q24"
      },
      "ItemFields": {
        "in": "query",
        "name": "_fields",
        "description": "Comma-separated list of fields to include in each response object.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "type",
              "labels",
              "descriptions",
              "aliases",
              "statements",
              "sitelinks"
            ]
          }
        },
        "explode": false,
        "style": "form"
      },
      "IfNoneMatch": {
        "name": "If-None-Match",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has been modified since the specified entity revision numbers",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(?:\".+\"|\\*)$"
          }
        },
        "example": [
          "\"1276705620\""
        ]
      },
      "IfModifiedSince": {
        "name": "If-Modified-Since",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has been modified after the specified date",
        "schema": {
          "type": "string",
          "format": "http-date"
        },
        "example": "Sat, 06 Jun 2020 16:38:47 GMT"
      },
      "IfMatch": {
        "name": "If-Match",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has not been modified since one of the specified entity revision numbers",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^(?:\".+\"|\\*)$"
          }
        },
        "example": [
          "\"1276705620\""
        ]
      },
      "IfUnmodifiedSince": {
        "name": "If-Unmodified-Since",
        "in": "header",
        "description": "Conditionally perform the request only if the resource has not been modified after the specified date",
        "schema": {
          "type": "string",
          "format": "http-date"
        },
        "example": "Sat, 06 Jun 2020 16:38:47 GMT"
      },
      "SiteId": {
        "in": "path",
        "name": "site_id",
        "description": "The ID of the required Site",
        "required": true,
        "schema": {
          "type": "string"
        },
        "example": "enwiki"
      },
      "PropertyId": {
        "in": "path",
        "name": "property_id",
        "description": "The ID of the required Property",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^P[1-9]\\d{0,9}$"
        },
        "example": "P694"
      },
      "PropertyFields": {
        "in": "query",
        "name": "_fields",
        "description": "Comma-separated list of fields to include in each response object.",
        "required": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "type",
              "data_type",
              "labels",
              "descriptions",
              "aliases",
              "statements"
            ]
          }
        },
        "explode": false,
        "style": "form"
      },
      "LanguageCode": {
        "in": "path",
        "name": "language_code",
        "description": "The requested resource language",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^[a-z]{2}[a-z0-9-]*$"
        },
        "example": "en"
      },
      "PropertyFilter": {
        "in": "query",
        "name": "property",
        "description": "Single Property ID to filter Statements by.",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^P[1-9]\\d{0,9}$"
        },
        "style": "form",
        "example": "P1628"
      },
      "ItemStatementId": {
        "in": "path",
        "name": "statement_id",
        "description": "The ID of a Statement on an Item",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(Q|q)[1-9]\\d{0,9}\\$.+$"
        },
        "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
      },
      "PropertyStatementId": {
        "in": "path",
        "name": "statement_id",
        "description": "The ID of a Statement on a Property",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(P|p)[1-9]\\d{0,9}\\$.+$"
        },
        "example": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71"
      },
      "StatementId": {
        "in": "path",
        "name": "statement_id",
        "description": "The ID of a Statement",
        "required": true,
        "schema": {
          "type": "string",
          "pattern": "^(Q|q|P|p)[1-9]\\d{0,9}\\$.+$"
        },
        "example": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA"
      }
    },
    "requestBodies": {
      "Item": {
        "description": "Payload containing a Wikibase Item and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "item": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "item",
                          "readOnly": true
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "sitelinks": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "object",
                            "properties": {
                              "title": {
                                "type": "string"
                              },
                              "badges": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "url": {
                                "type": "string",
                                "readOnly": true
                              }
                            },
                            "required": [
                              "title"
                            ]
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  },
                  "required": [
                    "item"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "item": {
                "labels": {
                  "en": "Jane Doe",
                  "ru": "Джейн Доу"
                },
                "descriptions": {
                  "en": "famous person",
                  "ru": "известная личность"
                },
                "aliases": {
                  "en": [
                    "Jane M. Doe",
                    "JD"
                  ],
                  "ru": [
                    "Джейн М. Доу"
                  ]
                },
                "statements": {
                  "P694": [
                    {
                      "property": {
                        "id": "P694"
                      },
                      "value": {
                        "type": "value",
                        "content": "Q626683"
                      }
                    }
                  ],
                  "P476": [
                    {
                      "property": {
                        "id": "P476"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+1986-01-27T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "P17": [
                    {
                      "property": {
                        "id": "P17"
                      },
                      "value": {
                        "type": "value",
                        "content": "Senior Team Supervisor"
                      },
                      "qualifiers": [
                        {
                          "property": {
                            "id": "P706"
                          },
                          "value": {
                            "type": "value",
                            "content": {
                              "time": "+2023-06-13T00:00:00Z",
                              "precision": 11,
                              "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                            }
                          }
                        }
                      ],
                      "references": [
                        {
                          "parts": [
                            {
                              "property": {
                                "id": "P709"
                              },
                              "value": {
                                "type": "value",
                                "content": "https://news.example.org"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "sitelinks": {
                  "enwiki": {
                    "title": "Jane Doe"
                  },
                  "ruwiki": {
                    "title": "Джейн Доу"
                  }
                }
              },
              "comment": "Create an Item for Jane Doe"
            }
          }
        }
      },
      "PatchItem": {
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/labels/en",
                  "value": "Jane Doe"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Update the English label"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/labels/en",
                  "value": "Jane Doe"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Update the English label"
            }
          }
        }
      },
      "PatchSitelinks": {
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "add",
                  "path": "/ruwiki/title",
                  "value": "Джейн Доу"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Add sitelink to ruwiki"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "add",
                  "path": "/ruwiki/title",
                  "value": "Джейн Доу"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Add sitelink to ruwiki"
            }
          }
        }
      },
      "Sitelink": {
        "description": "Payload containing a Wikibase Sitelink object and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "sitelink": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string"
                        },
                        "badges": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        },
                        "url": {
                          "type": "string",
                          "readOnly": true
                        }
                      },
                      "required": [
                        "title"
                      ]
                    }
                  },
                  "required": [
                    "sitelink"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "sitelink": {
                "title": "Jane Doe",
                "badges": []
              },
              "tags": [],
              "bot": false,
              "comment": "Add enwiki sitelink"
            }
          }
        }
      },
      "Delete": {
        "description": "Edit payload containing edit metadata",
        "required": false,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "tags": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": []
                },
                "bot": {
                  "type": "boolean",
                  "default": false
                },
                "comment": {
                  "type": "string"
                }
              }
            },
            "example": {
              "tags": [],
              "bot": false,
              "comment": "Example edit using the Wikibase REST API"
            }
          }
        }
      },
      "Property": {
        "description": "Payload containing a Wikibase Property and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "property": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "readOnly": true
                        },
                        "type": {
                          "type": "string",
                          "const": "property",
                          "readOnly": true
                        },
                        "data_type": {
                          "type": "string"
                        },
                        "labels": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "descriptions": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "string"
                          }
                        },
                        "aliases": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "statements": {
                          "type": "object",
                          "additionalProperties": {
                            "type": "array",
                            "items": {
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The globally unique identifier for this Statement",
                                      "type": "string",
                                      "readOnly": true
                                    },
                                    "rank": {
                                      "description": "The rank of the Statement",
                                      "type": "string",
                                      "enum": [
                                        "deprecated",
                                        "normal",
                                        "preferred"
                                      ],
                                      "default": "normal"
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                },
                                {
                                  "type": "object",
                                  "properties": {
                                    "qualifiers": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "property": {
                                            "type": "object",
                                            "properties": {
                                              "id": {
                                                "description": "The ID of the Property",
                                                "type": "string"
                                              },
                                              "data_type": {
                                                "description": "The data type of the Property",
                                                "type": [
                                                  "string",
                                                  "null"
                                                ],
                                                "readOnly": true
                                              }
                                            }
                                          },
                                          "value": {
                                            "type": "object",
                                            "properties": {
                                              "content": {
                                                "description": "The value, if type == \"value\", otherwise omitted"
                                              },
                                              "type": {
                                                "description": "The value type",
                                                "type": "string",
                                                "enum": [
                                                  "value",
                                                  "somevalue",
                                                  "novalue"
                                                ]
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    },
                                    "references": {
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "hash": {
                                            "description": "Hash of the Reference",
                                            "type": "string",
                                            "readOnly": true
                                          },
                                          "parts": {
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "property": {
                                                  "type": "object",
                                                  "properties": {
                                                    "id": {
                                                      "description": "The ID of the Property",
                                                      "type": "string"
                                                    },
                                                    "data_type": {
                                                      "description": "The data type of the Property",
                                                      "type": [
                                                        "string",
                                                        "null"
                                                      ],
                                                      "readOnly": true
                                                    }
                                                  }
                                                },
                                                "value": {
                                                  "type": "object",
                                                  "properties": {
                                                    "content": {
                                                      "description": "The value, if type == \"value\", otherwise omitted"
                                                    },
                                                    "type": {
                                                      "description": "The value type",
                                                      "type": "string",
                                                      "enum": [
                                                        "value",
                                                        "somevalue",
                                                        "novalue"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      },
                                      "default": []
                                    }
                                  }
                                }
                              ]
                            }
                          }
                        }
                      },
                      "required": [
                        "data_type"
                      ]
                    }
                  },
                  "required": [
                    "property"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "property": {
                "data_type": "wikibase-item",
                "labels": {
                  "en": "instance of",
                  "ru": "это частный случай понятия"
                },
                "descriptions": {
                  "en": "the subject is a concrete object (instance) of this class, category, or object group",
                  "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории"
                },
                "aliases": {
                  "en": [
                    "is a",
                    "is an"
                  ],
                  "ru": [
                    "представляет собой",
                    "является"
                  ]
                },
                "statements": {
                  "P1628": [
                    {
                      "property": {
                        "id": "P1628"
                      },
                      "value": {
                        "type": "value",
                        "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "PatchProperty": {
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "add",
                  "path": "/aliases/en/-",
                  "value": "is an"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "add 'is an' as an English alias"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "add",
                  "path": "/aliases/en/-",
                  "value": "is an"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "add 'is an' as an English alias"
            }
          }
        }
      },
      "ItemStatement": {
        "description": "Payload containing a Wikibase Statement object and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "statement": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The globally unique identifier for this Statement",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "rank": {
                                  "description": "The rank of the Statement",
                                  "type": "string",
                                  "enum": [
                                    "deprecated",
                                    "normal",
                                    "preferred"
                                  ],
                                  "default": "normal"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "qualifiers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                },
                                "references": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "hash": {
                                        "description": "Hash of the Reference",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "parts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "properties": {
                                "property": {
                                  "required": [
                                    "id"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              },
                              "required": [
                                "property",
                                "value"
                              ]
                            },
                            {
                              "properties": {
                                "qualifiers": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                },
                                "references": {
                                  "items": {
                                    "properties": {
                                      "parts": {
                                        "items": {
                                          "properties": {
                                            "property": {
                                              "required": [
                                                "id"
                                              ]
                                            },
                                            "value": {
                                              "required": [
                                                "type"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "property",
                                            "value"
                                          ]
                                        }
                                      }
                                    },
                                    "required": [
                                      "parts"
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "statement"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "statement": {
                "property": {
                  "id": "P17"
                },
                "value": {
                  "type": "value",
                  "content": "Senior Team Supervisor"
                },
                "qualifiers": [
                  {
                    "property": {
                      "id": "P706"
                    },
                    "value": {
                      "type": "value",
                      "content": {
                        "time": "+2023-06-13T00:00:00Z",
                        "precision": 11,
                        "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                      }
                    }
                  }
                ],
                "references": [
                  {
                    "parts": [
                      {
                        "property": {
                          "id": "P709"
                        },
                        "value": {
                          "type": "value",
                          "content": "https://news.example.org"
                        }
                      }
                    ]
                  }
                ]
              },
              "tags": [],
              "bot": false,
              "comment": "Example edit using the Wikibase REST API"
            }
          }
        }
      },
      "PatchItemStatement": {
        "description": "Payload containing a JSON Patch document to be applied to the Statement and edit metadata",
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "add",
                  "path": "/references/-",
                  "value": {
                    "parts": [
                      {
                        "property": {
                          "id": "P709"
                        },
                        "value": {
                          "type": "value",
                          "content": "https://news.example.org"
                        }
                      }
                    ]
                  }
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Add reference to Statement"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "add",
                  "path": "/references/-",
                  "value": {
                    "parts": [
                      {
                        "property": {
                          "id": "P709"
                        },
                        "value": {
                          "type": "value",
                          "content": "https://news.example.org"
                        }
                      }
                    ]
                  }
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Add reference to Statement"
            }
          }
        }
      },
      "PatchItemLabels": {
        "description": "Payload containing a JSON Patch document to be applied to Labels and edit metadata",
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/en",
                  "value": "Jane Doe"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "replace English label"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/en",
                  "value": "Jane Doe"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "replace English label"
            }
          }
        }
      },
      "PatchPropertyLabels": {
        "description": "Payload containing a JSON Patch document to be applied to Labels and edit metadata",
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/en",
                  "value": "instance of"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "replace English label"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/en",
                  "value": "instance of"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "replace English label"
            }
          }
        }
      },
      "ItemLabel": {
        "description": "Payload containing an Item label in the specified language and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "label"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "label": "Jane Doe",
              "tags": [],
              "bot": false,
              "comment": "Update the English label"
            }
          }
        }
      },
      "PropertyLabel": {
        "description": "Payload containing a Property label in the specified language and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "label"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "label": "instance of",
              "tags": [],
              "bot": false,
              "comment": "Update the English label"
            }
          }
        }
      },
      "PropertyStatement": {
        "description": "Payload containing a Wikibase Statement object and edit metadata",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "statement": {
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The globally unique identifier for this Statement",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "rank": {
                                  "description": "The rank of the Statement",
                                  "type": "string",
                                  "enum": [
                                    "deprecated",
                                    "normal",
                                    "preferred"
                                  ],
                                  "default": "normal"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "qualifiers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                },
                                "references": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "hash": {
                                        "description": "Hash of the Reference",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "parts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                }
                              }
                            }
                          ]
                        },
                        {
                          "allOf": [
                            {
                              "properties": {
                                "property": {
                                  "required": [
                                    "id"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              },
                              "required": [
                                "property",
                                "value"
                              ]
                            },
                            {
                              "properties": {
                                "qualifiers": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                },
                                "references": {
                                  "items": {
                                    "properties": {
                                      "parts": {
                                        "items": {
                                          "properties": {
                                            "property": {
                                              "required": [
                                                "id"
                                              ]
                                            },
                                            "value": {
                                              "required": [
                                                "type"
                                              ]
                                            }
                                          },
                                          "required": [
                                            "property",
                                            "value"
                                          ]
                                        }
                                      }
                                    },
                                    "required": [
                                      "parts"
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "statement"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "statement": {
                "property": {
                  "id": "P1628"
                },
                "value": {
                  "type": "value",
                  "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                }
              },
              "tags": [],
              "bot": false,
              "comment": "Example edit using the Wikibase REST API"
            }
          }
        }
      },
      "PatchPropertyStatement": {
        "description": "Payload containing a JSON Patch document to be applied to the Statement and edit metadata",
        "required": true,
        "content": {
          "application/json-patch+json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/value/content",
                  "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Update value of the 'equivalent property' Statement"
            }
          },
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "patch": {
                      "description": "A JSON Patch document as defined by RFC 6902",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "op": {
                            "description": "The operation to perform",
                            "type": "string",
                            "enum": [
                              "add",
                              "copy",
                              "move",
                              "remove",
                              "replace",
                              "test"
                            ]
                          },
                          "path": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "from": {
                            "description": "A JSON Pointer",
                            "type": "string"
                          },
                          "value": {
                            "description": "The value to be used within the operation"
                          }
                        },
                        "required": [
                          "op",
                          "path"
                        ]
                      }
                    }
                  },
                  "required": [
                    "patch"
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "default": []
                    },
                    "bot": {
                      "type": "boolean",
                      "default": false
                    },
                    "comment": {
                      "type": "string"
                    }
                  }
                }
              ]
            },
            "example": {
              "patch": [
                {
                  "op": "replace",
                  "path": "/value/content",
                  "value": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                }
              ],
              "tags": [],
              "bot": false,
              "comment": "Update value of the 'equivalent property' Statement"
            }
          }
        }
      }
    },
    "responses": {
      "Item": {
        "description": "A single Wikibase Item",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "const": "item",
                      "readOnly": true
                    },
                    "labels": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "descriptions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "aliases": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "sitelinks": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "title": {
                            "type": "string"
                          },
                          "badges": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "url": {
                            "type": "string",
                            "readOnly": true
                          }
                        },
                        "required": [
                          "title"
                        ]
                      }
                    },
                    "statements": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The globally unique identifier for this Statement",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "rank": {
                                  "description": "The rank of the Statement",
                                  "type": "string",
                                  "enum": [
                                    "deprecated",
                                    "normal",
                                    "preferred"
                                  ],
                                  "default": "normal"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "qualifiers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                },
                                "references": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "hash": {
                                        "description": "Hash of the Reference",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "parts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                },
                {
                  "required": [
                    "id",
                    "type",
                    "labels",
                    "descriptions",
                    "aliases",
                    "statements",
                    "sitelinks"
                  ],
                  "properties": {
                    "sitelinks": {
                      "additionalProperties": {
                        "required": [
                          "title",
                          "badges",
                          "url"
                        ]
                      }
                    },
                    "statements": {
                      "additionalProperties": {
                        "items": {
                          "allOf": [
                            {
                              "required": [
                                "property",
                                "value"
                              ],
                              "properties": {
                                "property": {
                                  "required": [
                                    "id",
                                    "data_type"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              }
                            },
                            {
                              "required": [
                                "id",
                                "rank",
                                "qualifiers",
                                "references"
                              ],
                              "properties": {
                                "qualifiers": {
                                  "items": {
                                    "required": [
                                      "property",
                                      "value"
                                    ],
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "references": {
                                  "items": {
                                    "required": [
                                      "hash",
                                      "parts"
                                    ],
                                    "properties": {
                                      "parts": {
                                        "items": {
                                          "required": [
                                            "property",
                                            "value"
                                          ],
                                          "properties": {
                                            "property": {
                                              "required": [
                                                "id",
                                                "data_type"
                                              ]
                                            },
                                            "value": {
                                              "required": [
                                                "type"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            },
            "example": {
              "id": "Q24",
              "type": "item",
              "labels": {
                "en": "Jane Doe",
                "ru": "Джейн Доу"
              },
              "descriptions": {
                "en": "famous person",
                "ru": "известная личность"
              },
              "aliases": {
                "en": [
                  "Jane M. Doe",
                  "JD"
                ],
                "ru": [
                  "Джейн М. Доу"
                ]
              },
              "statements": {
                "P694": [
                  {
                    "id": "Q24$BB728546-A400-4116-A772-16D54B62AC2B",
                    "rank": "normal",
                    "property": {
                      "id": "P694",
                      "data_type": "wikibase-item"
                    },
                    "value": {
                      "type": "value",
                      "content": "Q626683"
                    },
                    "qualifiers": [],
                    "references": []
                  }
                ],
                "P476": [
                  {
                    "id": "Q24$F3B2F956-B6AB-4984-8D89-BEE0FFFA3385",
                    "rank": "normal",
                    "property": {
                      "id": "P476",
                      "data_type": "time"
                    },
                    "value": {
                      "type": "value",
                      "content": {
                        "time": "+1986-01-27T00:00:00Z",
                        "precision": 11,
                        "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                      }
                    },
                    "qualifiers": [],
                    "references": []
                  }
                ],
                "P17": [
                  {
                    "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                    "rank": "normal",
                    "property": {
                      "id": "P17",
                      "data_type": "string"
                    },
                    "value": {
                      "type": "value",
                      "content": "Senior Team Supervisor"
                    },
                    "qualifiers": [
                      {
                        "property": {
                          "id": "P706",
                          "data_type": "time"
                        },
                        "value": {
                          "type": "value",
                          "content": {
                            "time": "+2023-06-13T00:00:00Z",
                            "precision": 11,
                            "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                          }
                        }
                      }
                    ],
                    "references": [
                      {
                        "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                        "parts": [
                          {
                            "property": {
                              "id": "P709",
                              "data_type": "url"
                            },
                            "value": {
                              "type": "value",
                              "content": "https://news.example.org"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "sitelinks": {
                "enwiki": {
                  "title": "Jane Doe",
                  "badges": [],
                  "url": "https://enwiki.example.org/wiki/Jane_Doe"
                },
                "ruwiki": {
                  "title": "Джейн Доу",
                  "badges": [],
                  "url": "https://ruwiki.example.org/wiki/Джейн_Доу"
                }
              }
            }
          }
        }
      },
      "InvalidNewItemInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "statement-group-property-id-mismatch": {
                "value": {
                  "code": "statement-group-property-id-mismatch",
                  "message": "Statement's Property ID does not match the Statement group key",
                  "context": {
                    "path": "{property_id_key}/{index}/property/id",
                    "statement_group_property_id": "{property_id_key}",
                    "statement_property_id": "{property_id_value}"
                  }
                }
              },
              "referenced-resource-not-found": {
                "value": {
                  "code": "referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "invalid-key": {
                "value": {
                  "code": "invalid-key",
                  "message": "Invalid key '{key}' in '{json_pointer_to_parent}'",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "key": "{key}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PermissionDenied": {
        "description": "The access to resource was denied",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "permission-denied": {
                "value": {
                  "code": "permission-denied",
                  "message": "Access to resource is denied",
                  "context": {
                    "denial_reason": "{reason_code}",
                    "denial_context": "{additional_context}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "DataPolicyViolation": {
        "description": "The edit request violates data policy",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "data-policy-violation": {
                "value": {
                  "code": "data-policy-violation",
                  "message": "Edit violates data policy",
                  "context": {
                    "violation": "{violation_code}",
                    "violation_context": {
                      "some": "context"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "RequestLimitReached": {
        "description": "Too many requests",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "request-limit-reached": {
                "value": {
                  "code": "request-limit-reached",
                  "message": "Exceeded the limit of actions that can be performed in a given span of time",
                  "context": {
                    "reason": "{reason_code}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "UnexpectedError": {
        "description": "An unexpected error has occurred",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "example": {
              "code": "unexpected-error",
              "message": "Unexpected Error"
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "NotModified": {
        "description": "The specified resource has not been modified since last provided revision number or date",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "MovedPermanently": {
        "description": "The specified resource has permanently moved to the indicated location",
        "headers": {
          "Location": {
            "description": "The URL to which the requested resource has been moved",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidGetItemInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-query-parameter": {
                "value": {
                  "code": "invalid-query-parameter",
                  "message": "Invalid query parameter: '{parameter}'",
                  "context": {
                    "parameter": "{parameter}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "ResourceNotFound": {
        "description": "The specified resource was not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "resource-not-found": {
                "value": {
                  "code": "resource-not-found",
                  "message": "The requested resource does not exist",
                  "context": {
                    "resource_type": "{resource_type}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PreconditionFailedError": {
        "description": "The condition defined by a conditional request header is not fulfilled"
      },
      "InvalidPatch": {
        "description": "The provided JSON Patch request is invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "CannotApplyItemPatch": {
        "description": "The provided JSON Patch cannot be applied",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "redirected-item": {
                "value": {
                  "code": "redirected-item",
                  "message": "Item {item_id} has been redirected to {redirect_target_id}",
                  "context": {
                    "redirect_target": "{redirect_target_id}"
                  }
                }
              },
              "patch-test-failed": {
                "value": {
                  "code": "patch-test-failed",
                  "message": "Test operation in the provided patch failed",
                  "context": {
                    "path": "{json_pointer_to_patch_operation}",
                    "actual_value": "actual value"
                  }
                }
              },
              "patch-target-not-found": {
                "value": {
                  "code": "patch-target-not-found",
                  "message": "Target not found on resource",
                  "context": {
                    "path": "{json_pointer_to_target_in_patch}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidPatchedItem": {
        "description": "Applying the provided JSON Patch results in an invalid Property",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-result-invalid-value": {
                "value": {
                  "code": "patch-result-invalid-value",
                  "message": "Invalid value in patch result",
                  "context": {
                    "value": "{value}",
                    "path": "{path}"
                  }
                }
              },
              "patched-statement-group-property-id-mismatch": {
                "value": {
                  "code": "patched-statement-group-property-id-mismatch",
                  "message": "Statement's Property ID does not match the Statement group key",
                  "context": {
                    "path": "{property_id_key}/{index}/property/id",
                    "statement_group_property_id": "{property_id_key}",
                    "statement_property_id": "{property_id_value}"
                  }
                }
              },
              "patch-result-referenced-resource-not-found": {
                "value": {
                  "code": "patch-result-referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer_to_missing_resource_in_patch_result}",
                    "value": "{value}"
                  }
                }
              },
              "patch-result-missing-field": {
                "value": {
                  "code": "patch-result-missing-field",
                  "message": "Required field missing in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "patch-result-invalid-key": {
                "value": {
                  "code": "patch-result-invalid-key",
                  "message": "Invalid key in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent_in_patch_result}",
                    "key": "{key}"
                  }
                }
              },
              "patch-result-value-too-long": {
                "value": {
                  "code": "patch-result-value-too-long",
                  "message": "Patched value is too long",
                  "context": {
                    "path": "{json_pointer_to_patched_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "patch-result-modified-read-only-value": {
                "value": {
                  "code": "patch-result-modified-read-only-value",
                  "message": "Read only value in patch result cannot be modified",
                  "context": {
                    "path": "{json_pointer_to_readonly_value}"
                  }
                }
              },
              "data-policy-violation": {
                "value": {
                  "code": "data-policy-violation",
                  "message": "Edit violates data policy",
                  "context": {
                    "violation": "{violation_code}",
                    "violation_context": {
                      "some": "context"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "Sitelinks": {
        "description": "A list of Sitelinks by Item id",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string"
                  },
                  "badges": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "type": "string",
                    "readOnly": true
                  }
                },
                "required": [
                  "title"
                ]
              }
            },
            "example": {
              "enwiki": {
                "title": "Jane Doe",
                "badges": [],
                "url": "https://enwiki.example.org/wiki/Jane_Doe"
              },
              "ruwiki": {
                "title": "Джейн Доу",
                "badges": [],
                "url": "https://ruwiki.example.org/wiki/Джейн_Доу"
              }
            }
          }
        }
      },
      "InvalidEntityIdInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidPatchedItemSitelinks": {
        "description": "Applying the provided JSON Patch results in invalid Sitelinks",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-result-referenced-resource-not-found": {
                "value": {
                  "code": "patch-result-referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer_to_missing_resource_in_patch_result}",
                    "value": "{value}"
                  }
                }
              },
              "patch-result-invalid-value": {
                "value": {
                  "code": "patch-result-invalid-value",
                  "message": "Invalid value in patch result",
                  "context": {
                    "value": "{value}",
                    "path": "{path}"
                  }
                }
              },
              "patch-result-missing-field": {
                "value": {
                  "code": "patch-result-missing-field",
                  "message": "Required field missing in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "patch-result-invalid-key": {
                "value": {
                  "code": "patch-result-invalid-key",
                  "message": "Invalid key in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent_in_patch_result}",
                    "key": "{key}"
                  }
                }
              },
              "patch-result-modified-read-only-value": {
                "value": {
                  "code": "patch-result-modified-read-only-value",
                  "message": "Read only value in patch result cannot be modified",
                  "context": {
                    "path": "{json_pointer_to_readonly_value}"
                  }
                }
              },
              "data-policy-violation": {
                "value": {
                  "code": "data-policy-violation",
                  "message": "Edit violates data policy",
                  "context": {
                    "violation": "{violation_code}",
                    "violation_context": {
                      "some": "context"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "Sitelink": {
        "description": "A Sitelink by Item id",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "badges": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "url": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "required": [
                "title"
              ]
            },
            "example": {
              "title": "Jane Doe",
              "badges": [],
              "url": "https://enwiki.example.org/wiki/Jane_Doe"
            }
          }
        }
      },
      "InvalidGetSitelinkInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidSetSitelinkInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "referenced-resource-not-found": {
                "value": {
                  "code": "referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "ItemRedirected": {
        "description": "The specified Item was redirected",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "redirected-item": {
                "value": {
                  "code": "redirected-item",
                  "message": "Item {item_id} has been redirected to {redirect_target_id}",
                  "context": {
                    "redirect_target": "{redirect_target_id}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "SitelinkDeleted": {
        "description": "The resource was deleted",
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which response is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Sitelink deleted"
          }
        }
      },
      "InvalidRemoveSitelinkInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "Property": {
        "description": "A single Wikibase Property",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "readOnly": true
                    },
                    "type": {
                      "type": "string",
                      "const": "property",
                      "readOnly": true
                    },
                    "data_type": {
                      "type": "string"
                    },
                    "labels": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "descriptions": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "string"
                      }
                    },
                    "aliases": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "statements": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "array",
                        "items": {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The globally unique identifier for this Statement",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "rank": {
                                  "description": "The rank of the Statement",
                                  "type": "string",
                                  "enum": [
                                    "deprecated",
                                    "normal",
                                    "preferred"
                                  ],
                                  "default": "normal"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "qualifiers": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                },
                                "references": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "hash": {
                                        "description": "Hash of the Reference",
                                        "type": "string",
                                        "readOnly": true
                                      },
                                      "parts": {
                                        "type": "array",
                                        "items": {
                                          "type": "object",
                                          "properties": {
                                            "property": {
                                              "type": "object",
                                              "properties": {
                                                "id": {
                                                  "description": "The ID of the Property",
                                                  "type": "string"
                                                },
                                                "data_type": {
                                                  "description": "The data type of the Property",
                                                  "type": [
                                                    "string",
                                                    "null"
                                                  ],
                                                  "readOnly": true
                                                }
                                              }
                                            },
                                            "value": {
                                              "type": "object",
                                              "properties": {
                                                "content": {
                                                  "description": "The value, if type == \"value\", otherwise omitted"
                                                },
                                                "type": {
                                                  "description": "The value type",
                                                  "type": "string",
                                                  "enum": [
                                                    "value",
                                                    "somevalue",
                                                    "novalue"
                                                  ]
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "default": []
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  "required": [
                    "data_type"
                  ]
                },
                {
                  "required": [
                    "id",
                    "type",
                    "data_type",
                    "labels",
                    "descriptions",
                    "aliases",
                    "statements"
                  ],
                  "properties": {
                    "statements": {
                      "additionalProperties": {
                        "items": {
                          "allOf": [
                            {
                              "required": [
                                "property",
                                "value"
                              ],
                              "properties": {
                                "property": {
                                  "required": [
                                    "id",
                                    "data_type"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              }
                            },
                            {
                              "required": [
                                "id",
                                "rank",
                                "qualifiers",
                                "references"
                              ],
                              "properties": {
                                "qualifiers": {
                                  "items": {
                                    "required": [
                                      "property",
                                      "value"
                                    ],
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    }
                                  }
                                },
                                "references": {
                                  "items": {
                                    "required": [
                                      "hash",
                                      "parts"
                                    ],
                                    "properties": {
                                      "parts": {
                                        "items": {
                                          "required": [
                                            "property",
                                            "value"
                                          ],
                                          "properties": {
                                            "property": {
                                              "required": [
                                                "id",
                                                "data_type"
                                              ]
                                            },
                                            "value": {
                                              "required": [
                                                "type"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                }
              ]
            },
            "example": {
              "id": "P694",
              "type": "property",
              "data_type": "wikibase-item",
              "labels": {
                "en": "instance of",
                "ru": "это частный случай понятия"
              },
              "descriptions": {
                "en": "the subject is a concrete object (instance) of this class, category, or object group",
                "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории."
              },
              "aliases": {
                "en": [
                  "is a",
                  "is an"
                ],
                "ru": [
                  "представляет собой",
                  "является"
                ]
              },
              "statements": {
                "P1628": [
                  {
                    "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                    "rank": "normal",
                    "property": {
                      "id": "P1628",
                      "data_type": "url"
                    },
                    "value": {
                      "type": "value",
                      "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                    },
                    "qualifiers": [],
                    "references": []
                  }
                ]
              }
            }
          }
        }
      },
      "InvalidNewPropertyInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "statement-group-property-id-mismatch": {
                "value": {
                  "code": "statement-group-property-id-mismatch",
                  "message": "Statement's Property ID does not match the Statement group key",
                  "context": {
                    "path": "{property_id_key}/{index}/property/id",
                    "statement_group_property_id": "{property_id_key}",
                    "statement_property_id": "{property_id_value}"
                  }
                }
              },
              "referenced-resource-not-found": {
                "value": {
                  "code": "referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "invalid-key": {
                "value": {
                  "code": "invalid-key",
                  "message": "Invalid key '{key}' in '{json_pointer_to_parent}'",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "key": "{key}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidGetPropertyInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-query-parameter": {
                "value": {
                  "code": "invalid-query-parameter",
                  "message": "Invalid query parameter: '{parameter}'",
                  "context": {
                    "parameter": "{parameter}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "CannotApplyPropertyPatch": {
        "description": "The provided JSON Patch cannot be applied",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-test-failed": {
                "value": {
                  "code": "patch-test-failed",
                  "message": "Test operation in the provided patch failed",
                  "context": {
                    "path": "{json_pointer_to_patch_operation}",
                    "actual_value": "actual value"
                  }
                }
              },
              "patch-target-not-found": {
                "value": {
                  "code": "patch-target-not-found",
                  "message": "Target not found on resource",
                  "context": {
                    "path": "{json_pointer_to_target_in_patch}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidPatchedProperty": {
        "description": "Applying the provided JSON Patch results in an invalid Property",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-result-missing-field": {
                "value": {
                  "code": "patch-result-missing-field",
                  "message": "Required field missing in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "patched-statement-group-property-id-mismatch": {
                "value": {
                  "code": "patched-statement-group-property-id-mismatch",
                  "message": "Statement's Property ID does not match the Statement group key",
                  "context": {
                    "path": "{property_id_key}/{index}/property/id",
                    "statement_group_property_id": "{property_id_key}",
                    "statement_property_id": "{property_id_value}"
                  }
                }
              },
              "patch-result-invalid-key": {
                "value": {
                  "code": "patch-result-invalid-key",
                  "message": "Invalid key in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent_in_patch_result}",
                    "key": "{key}"
                  }
                }
              },
              "patch-result-invalid-value": {
                "value": {
                  "code": "patch-result-invalid-value",
                  "message": "Invalid value in patch result",
                  "context": {
                    "value": "{value}",
                    "path": "{path}"
                  }
                }
              },
              "patch-result-referenced-resource-not-found": {
                "value": {
                  "code": "patch-result-referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer_to_missing_resource_in_patch_result}",
                    "value": "{value}"
                  }
                }
              },
              "patch-result-value-too-long": {
                "value": {
                  "code": "patch-result-value-too-long",
                  "message": "Patched value is too long",
                  "context": {
                    "path": "{json_pointer_to_patched_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "patch-result-modified-read-only-value": {
                "value": {
                  "code": "patch-result-modified-read-only-value",
                  "message": "Read only value in patch result cannot be modified",
                  "context": {
                    "path": "{json_pointer_to_readonly_value}"
                  }
                }
              },
              "data-policy-violation": {
                "value": {
                  "code": "data-policy-violation",
                  "message": "Edit violates data policy",
                  "context": {
                    "violation": "{violation_code}",
                    "violation_context": {
                      "some": "context"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "ItemDescriptions": {
        "description": "Item's descriptions by language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "en": "famous person",
              "ru": "известная личность"
            }
          }
        }
      },
      "InvalidPatchedDescriptions": {
        "description": "Applying the provided JSON Patch results in invalid descriptions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-result-invalid-key": {
                "value": {
                  "code": "patch-result-invalid-key",
                  "message": "Invalid key in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent_in_patch_result}",
                    "key": "{key}"
                  }
                }
              },
              "patch-result-invalid-value": {
                "value": {
                  "code": "patch-result-invalid-value",
                  "message": "Invalid value in patch result",
                  "context": {
                    "value": "{value}",
                    "path": "{path}"
                  }
                }
              },
              "patch-result-value-too-long": {
                "value": {
                  "code": "patch-result-value-too-long",
                  "message": "Patched value is too long",
                  "context": {
                    "path": "{json_pointer_to_patched_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "data-policy-violation": {
                "value": {
                  "code": "data-policy-violation",
                  "message": "Edit violates data policy",
                  "context": {
                    "violation": "{violation_code}",
                    "violation_context": {
                      "some": "context"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PropertyDescriptions": {
        "description": "Property's descriptions by language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "en": "the subject is a concrete object (instance) of this class, category, or object group",
              "ru": "данный элемент представляет собой конкретный объект (экземпляр / частный случай) класса, категории"
            }
          }
        }
      },
      "ItemDescription": {
        "description": "Item's description in a specific language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "famous person"
          }
        }
      },
      "InvalidTermByLanguageInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidSetDescriptionInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "DescriptionDeleted": {
        "description": "The description was deleted",
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which response is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Description deleted"
          }
        }
      },
      "InvalidRemoveDescriptionInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "MovedTemporarily": {
        "description": "The specified resource has temporarily moved to the indicated location",
        "headers": {
          "Location": {
            "description": "The URL to which the requested resource has been moved",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PropertyDescription": {
        "description": "Property's description in a specific language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "the subject is a concrete object (instance) of this class, category, or object group"
          }
        }
      },
      "ItemStatements": {
        "description": "The Statements of an Item",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "example": {
              "P694": [
                {
                  "id": "Q24$BB728546-A400-4116-A772-16D54B62AC2B",
                  "rank": "normal",
                  "property": {
                    "id": "P694",
                    "data_type": "wikibase-item"
                  },
                  "value": {
                    "type": "value",
                    "content": "Q626683"
                  },
                  "qualifiers": [],
                  "references": []
                }
              ],
              "P476": [
                {
                  "id": "Q24$F3B2F956-B6AB-4984-8D89-BEE0FFFA3385",
                  "rank": "normal",
                  "property": {
                    "id": "P476",
                    "data_type": "time"
                  },
                  "value": {
                    "type": "value",
                    "content": {
                      "time": "+1986-01-27T00:00:00Z",
                      "precision": 11,
                      "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                    }
                  },
                  "qualifiers": [],
                  "references": []
                }
              ],
              "P17": [
                {
                  "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
                  "rank": "normal",
                  "property": {
                    "id": "P17",
                    "data_type": "string"
                  },
                  "value": {
                    "type": "value",
                    "content": "Senior Team Supervisor"
                  },
                  "qualifiers": [
                    {
                      "property": {
                        "id": "P706",
                        "data_type": "time"
                      },
                      "value": {
                        "type": "value",
                        "content": {
                          "time": "+2023-06-13T00:00:00Z",
                          "precision": 11,
                          "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                        }
                      }
                    }
                  ],
                  "references": [
                    {
                      "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                      "parts": [
                        {
                          "property": {
                            "id": "P709",
                            "data_type": "url"
                          },
                          "value": {
                            "type": "value",
                            "content": "https://news.example.org"
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "InvalidRetrieveStatementsInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-query-parameter": {
                "value": {
                  "code": "invalid-query-parameter",
                  "message": "Invalid query parameter: '{parameter}'",
                  "context": {
                    "parameter": "{parameter}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidNewStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              },
              "referenced-resource-not-found": {
                "value": {
                  "code": "referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "ItemStatement": {
        "description": "A Wikibase Statement. Please note that the value of the `ETag` header field refers to the Item's revision ID.",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The globally unique identifier for this Statement",
                          "type": "string",
                          "readOnly": true
                        },
                        "rank": {
                          "description": "The rank of the Statement",
                          "type": "string",
                          "enum": [
                            "deprecated",
                            "normal",
                            "preferred"
                          ],
                          "default": "normal"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The ID of the Property",
                              "type": "string"
                            },
                            "data_type": {
                              "description": "The data type of the Property",
                              "type": [
                                "string",
                                "null"
                              ],
                              "readOnly": true
                            }
                          }
                        },
                        "value": {
                          "type": "object",
                          "properties": {
                            "content": {
                              "description": "The value, if type == \"value\", otherwise omitted"
                            },
                            "type": {
                              "description": "The value type",
                              "type": "string",
                              "enum": [
                                "value",
                                "somevalue",
                                "novalue"
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "qualifiers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "property": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The ID of the Property",
                                    "type": "string"
                                  },
                                  "data_type": {
                                    "description": "The data type of the Property",
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "readOnly": true
                                  }
                                }
                              },
                              "value": {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "description": "The value, if type == \"value\", otherwise omitted"
                                  },
                                  "type": {
                                    "description": "The value type",
                                    "type": "string",
                                    "enum": [
                                      "value",
                                      "somevalue",
                                      "novalue"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "default": []
                        },
                        "references": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "hash": {
                                "description": "Hash of the Reference",
                                "type": "string",
                                "readOnly": true
                              },
                              "parts": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "default": []
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "properties": {
                        "property": {
                          "required": [
                            "id",
                            "data_type"
                          ]
                        },
                        "value": {
                          "required": [
                            "type"
                          ]
                        }
                      },
                      "required": [
                        "property",
                        "value"
                      ]
                    },
                    {
                      "properties": {
                        "qualifiers": {
                          "items": {
                            "properties": {
                              "property": {
                                "required": [
                                  "id",
                                  "data_type"
                                ]
                              },
                              "value": {
                                "required": [
                                  "type"
                                ]
                              }
                            },
                            "required": [
                              "property",
                              "value"
                            ]
                          }
                        },
                        "references": {
                          "properties": {
                            "parts": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "hash",
                            "parts"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "rank",
                        "qualifiers",
                        "references"
                      ]
                    }
                  ]
                }
              ]
            },
            "example": {
              "id": "Q24$9966A1CA-F3F5-4B1D-A534-7CD5953169DA",
              "rank": "normal",
              "property": {
                "id": "P17",
                "data_type": "string"
              },
              "value": {
                "type": "value",
                "content": "Senior Team Supervisor"
              },
              "qualifiers": [
                {
                  "property": {
                    "id": "P706",
                    "data_type": "time"
                  },
                  "value": {
                    "type": "value",
                    "content": {
                      "time": "+2023-06-13T00:00:00Z",
                      "precision": 11,
                      "calendarmodel": "http://www.wikidata.org/entity/Q1985727"
                    }
                  }
                }
              ],
              "references": [
                {
                  "hash": "7ccd777f870b71a4c5056c7fd2a83a22cc39be6d",
                  "parts": [
                    {
                      "property": {
                        "id": "P709",
                        "data_type": "url"
                      },
                      "value": {
                        "type": "value",
                        "content": "https://news.example.org"
                      }
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "InvalidRetrieveItemStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "item-statement-id-mismatch": {
                "value": {
                  "code": "item-statement-id-mismatch",
                  "message": "IDs of the Item and the Statement do not match",
                  "context": {
                    "item_id": "{item_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidReplaceItemStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "item-statement-id-mismatch": {
                "value": {
                  "code": "item-statement-id-mismatch",
                  "message": "IDs of the Item and the Statement do not match",
                  "context": {
                    "item_id": "{item_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "cannot-modify-read-only-value": {
                "value": {
                  "code": "cannot-modify-read-only-value",
                  "message": "The input value cannot be modified",
                  "context": {
                    "path": "{readonly_value_pointer}"
                  }
                }
              },
              "referenced-resource-not-found": {
                "value": {
                  "code": "referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "StatementDeleted": {
        "description": "The requested Statement was deleted",
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which response is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Statement deleted"
          }
        }
      },
      "InvalidRemoveItemStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "item-statement-id-mismatch": {
                "value": {
                  "code": "item-statement-id-mismatch",
                  "message": "IDs of the Item and the Statement do not match",
                  "context": {
                    "item_id": "{item_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidItemStatementPatch": {
        "description": "The provided JSON Patch is invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "item-statement-id-mismatch": {
                "value": {
                  "code": "item-statement-id-mismatch",
                  "message": "IDs of the Item and the Statement do not match",
                  "context": {
                    "item_id": "{item_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "CannotApplyStatementPatch": {
        "description": "The provided JSON Patch cannot be applied",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-test-failed": {
                "value": {
                  "code": "patch-test-failed",
                  "message": "Test operation in the provided patch failed",
                  "context": {
                    "path": "{json_pointer_to_patch_operation}",
                    "actual_value": "actual value"
                  }
                }
              },
              "patch-target-not-found": {
                "value": {
                  "code": "patch-target-not-found",
                  "message": "Target not found on resource",
                  "context": {
                    "path": "{json_pointer_to_target_in_patch}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidPatchedStatement": {
        "description": "Applying the provided JSON Patch results in an invalid Statement",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-result-missing-field": {
                "value": {
                  "code": "patch-result-missing-field",
                  "message": "Required field missing in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "patch-result-invalid-value": {
                "value": {
                  "code": "patch-result-invalid-value",
                  "message": "Invalid value in patch result",
                  "context": {
                    "value": "{value}",
                    "path": "{path}"
                  }
                }
              },
              "patch-result-modified-read-only-value": {
                "value": {
                  "code": "patch-result-modified-read-only-value",
                  "message": "Read only value in patch result cannot be modified",
                  "context": {
                    "path": "{json_pointer_to_readonly_value}"
                  }
                }
              },
              "patch-result-referenced-resource-not-found": {
                "value": {
                  "code": "patch-result-referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer_to_missing_resource_in_patch_result}",
                    "value": "{value}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "ItemLabels": {
        "description": "Item's labels by language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "en": "Jane Doe",
              "ru": "Джейн Доу"
            }
          }
        }
      },
      "InvalidPatchedLabels": {
        "description": "Applying the provided JSON Patch results in invalid Labels",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-result-invalid-key": {
                "value": {
                  "code": "patch-result-invalid-key",
                  "message": "Invalid key in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent_in_patch_result}",
                    "key": "{key}"
                  }
                }
              },
              "patch-result-invalid-value": {
                "value": {
                  "code": "patch-result-invalid-value",
                  "message": "Invalid value in patch result",
                  "context": {
                    "value": "{value}",
                    "path": "{path}"
                  }
                }
              },
              "patch-result-value-too-long": {
                "value": {
                  "code": "patch-result-value-too-long",
                  "message": "Patched value is too long",
                  "context": {
                    "path": "{json_pointer_to_patched_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "data-policy-violation": {
                "value": {
                  "code": "data-policy-violation",
                  "message": "Edit violates data policy",
                  "context": {
                    "violation": "{violation_code}",
                    "violation_context": {
                      "some": "context"
                    }
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PropertyLabels": {
        "description": "Property's labels by language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "example": {
              "en": "instance of",
              "ru": "это частный случай понятия"
            }
          }
        }
      },
      "ItemLabel": {
        "description": "A label in a specific language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Jane Doe"
          }
        }
      },
      "InvalidSetLabelInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "LabelDeleted": {
        "description": "The resource was deleted",
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which response is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "Label deleted"
          }
        }
      },
      "InvalidRemoveLabelInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PropertyLabel": {
        "description": "A label in a specific language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "string"
            },
            "example": "instance of"
          }
        }
      },
      "ItemAliases": {
        "description": "Item's aliases by language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "example": {
              "en": [
                "Jane M. Doe",
                "JD"
              ],
              "ru": [
                "Джейн М. Доу"
              ]
            }
          }
        }
      },
      "InvalidPatchedAliases": {
        "description": "Applying the provided JSON Patch results in invalid Aliases",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "patch-result-invalid-value": {
                "value": {
                  "code": "patch-result-invalid-value",
                  "message": "Invalid value in patch result",
                  "context": {
                    "value": "{value}",
                    "path": "{path}"
                  }
                }
              },
              "patch-result-invalid-key": {
                "value": {
                  "code": "patch-result-invalid-key",
                  "message": "Invalid key in patch result",
                  "context": {
                    "path": "{json_pointer_to_parent_in_patch_result}",
                    "key": "{key}"
                  }
                }
              },
              "patch-result-value-too-long": {
                "value": {
                  "code": "patch-result-value-too-long",
                  "message": "Patched value is too long",
                  "context": {
                    "path": "{json_pointer_to_patched_element}",
                    "limit": "{configured_limit}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PropertyAliases": {
        "description": "Property's aliases by language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "example": {
              "en": [
                "is a",
                "is an"
              ],
              "ru": [
                "представляет собой",
                "является"
              ]
            }
          }
        }
      },
      "ItemAliasesInLanguage": {
        "description": "Item's aliases in a specific language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "Jane M. Doe",
              "JD"
            ]
          }
        }
      },
      "InvalidAddAliasesInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "PropertyAliasesInLanguage": {
        "description": "Property's aliases in a specific language",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "is a",
              "is an"
            ]
          }
        }
      },
      "PropertyStatements": {
        "description": "The Statements of a Property",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "allOf": [
                    {
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The globally unique identifier for this Statement",
                              "type": "string",
                              "readOnly": true
                            },
                            "rank": {
                              "description": "The rank of the Statement",
                              "type": "string",
                              "enum": [
                                "deprecated",
                                "normal",
                                "preferred"
                              ],
                              "default": "normal"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        {
                          "type": "object",
                          "properties": {
                            "qualifiers": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            },
                            "references": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "hash": {
                                    "description": "Hash of the Reference",
                                    "type": "string",
                                    "readOnly": true
                                  },
                                  "parts": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "property": {
                                          "type": "object",
                                          "properties": {
                                            "id": {
                                              "description": "The ID of the Property",
                                              "type": "string"
                                            },
                                            "data_type": {
                                              "description": "The data type of the Property",
                                              "type": [
                                                "string",
                                                "null"
                                              ],
                                              "readOnly": true
                                            }
                                          }
                                        },
                                        "value": {
                                          "type": "object",
                                          "properties": {
                                            "content": {
                                              "description": "The value, if type == \"value\", otherwise omitted"
                                            },
                                            "type": {
                                              "description": "The value type",
                                              "type": "string",
                                              "enum": [
                                                "value",
                                                "somevalue",
                                                "novalue"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              },
                              "default": []
                            }
                          }
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        },
                        {
                          "properties": {
                            "qualifiers": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            },
                            "references": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "hash",
                                "parts"
                              ]
                            }
                          },
                          "required": [
                            "id",
                            "rank",
                            "qualifiers",
                            "references"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "example": {
              "P1628": [
                {
                  "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
                  "rank": "normal",
                  "property": {
                    "id": "P1628",
                    "data_type": "url"
                  },
                  "value": {
                    "type": "value",
                    "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                  },
                  "qualifiers": [],
                  "references": []
                }
              ]
            }
          }
        }
      },
      "PropertyStatement": {
        "description": "A Wikibase Statement. Please note that the value of the `ETag` header field refers to the Property's revision ID.",
        "headers": {
          "ETag": {
            "description": "Last entity revision number",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "Last-Modified": {
            "description": "Last modified date",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          "X-Authenticated-User": {
            "description": "Optional username of the user making the request",
            "schema": {
              "type": "string"
            }
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The globally unique identifier for this Statement",
                          "type": "string",
                          "readOnly": true
                        },
                        "rank": {
                          "description": "The rank of the Statement",
                          "type": "string",
                          "enum": [
                            "deprecated",
                            "normal",
                            "preferred"
                          ],
                          "default": "normal"
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The ID of the Property",
                              "type": "string"
                            },
                            "data_type": {
                              "description": "The data type of the Property",
                              "type": [
                                "string",
                                "null"
                              ],
                              "readOnly": true
                            }
                          }
                        },
                        "value": {
                          "type": "object",
                          "properties": {
                            "content": {
                              "description": "The value, if type == \"value\", otherwise omitted"
                            },
                            "type": {
                              "description": "The value type",
                              "type": "string",
                              "enum": [
                                "value",
                                "somevalue",
                                "novalue"
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "object",
                      "properties": {
                        "qualifiers": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "property": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The ID of the Property",
                                    "type": "string"
                                  },
                                  "data_type": {
                                    "description": "The data type of the Property",
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "readOnly": true
                                  }
                                }
                              },
                              "value": {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "description": "The value, if type == \"value\", otherwise omitted"
                                  },
                                  "type": {
                                    "description": "The value type",
                                    "type": "string",
                                    "enum": [
                                      "value",
                                      "somevalue",
                                      "novalue"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "default": []
                        },
                        "references": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "hash": {
                                "description": "Hash of the Reference",
                                "type": "string",
                                "readOnly": true
                              },
                              "parts": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "property": {
                                      "type": "object",
                                      "properties": {
                                        "id": {
                                          "description": "The ID of the Property",
                                          "type": "string"
                                        },
                                        "data_type": {
                                          "description": "The data type of the Property",
                                          "type": [
                                            "string",
                                            "null"
                                          ],
                                          "readOnly": true
                                        }
                                      }
                                    },
                                    "value": {
                                      "type": "object",
                                      "properties": {
                                        "content": {
                                          "description": "The value, if type == \"value\", otherwise omitted"
                                        },
                                        "type": {
                                          "description": "The value type",
                                          "type": "string",
                                          "enum": [
                                            "value",
                                            "somevalue",
                                            "novalue"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "default": []
                        }
                      }
                    }
                  ]
                },
                {
                  "allOf": [
                    {
                      "properties": {
                        "property": {
                          "required": [
                            "id",
                            "data_type"
                          ]
                        },
                        "value": {
                          "required": [
                            "type"
                          ]
                        }
                      },
                      "required": [
                        "property",
                        "value"
                      ]
                    },
                    {
                      "properties": {
                        "qualifiers": {
                          "items": {
                            "properties": {
                              "property": {
                                "required": [
                                  "id",
                                  "data_type"
                                ]
                              },
                              "value": {
                                "required": [
                                  "type"
                                ]
                              }
                            },
                            "required": [
                              "property",
                              "value"
                            ]
                          }
                        },
                        "references": {
                          "properties": {
                            "parts": {
                              "items": {
                                "properties": {
                                  "property": {
                                    "required": [
                                      "id",
                                      "data_type"
                                    ]
                                  },
                                  "value": {
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "required": [
                                  "property",
                                  "value"
                                ]
                              }
                            }
                          },
                          "required": [
                            "hash",
                            "parts"
                          ]
                        }
                      },
                      "required": [
                        "id",
                        "rank",
                        "qualifiers",
                        "references"
                      ]
                    }
                  ]
                }
              ]
            },
            "example": {
              "id": "P694$B4C349A2-C504-4FC5-B7D5-8B781C719D71",
              "rank": "normal",
              "property": {
                "id": "P1628",
                "data_type": "url"
              },
              "value": {
                "type": "value",
                "content": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
              },
              "qualifiers": [],
              "references": []
            }
          }
        }
      },
      "InvalidRetrievePropertyStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "property-statement-id-mismatch": {
                "value": {
                  "code": "property-statement-id-mismatch",
                  "message": "IDs of the Property and the Statement do not match",
                  "context": {
                    "property_id": "{property_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidReplacePropertyStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "property-statement-id-mismatch": {
                "value": {
                  "code": "property-statement-id-mismatch",
                  "message": "IDs of the Property and the Statement do not match",
                  "context": {
                    "property_id": "{property_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "cannot-modify-read-only-value": {
                "value": {
                  "code": "cannot-modify-read-only-value",
                  "message": "The input value cannot be modified",
                  "context": {
                    "path": "{readonly_value_pointer}"
                  }
                }
              },
              "referenced-resource-not-found": {
                "value": {
                  "code": "referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidRemovePropertyStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "property-statement-id-mismatch": {
                "value": {
                  "code": "property-statement-id-mismatch",
                  "message": "IDs of the Property and the Statement do not match",
                  "context": {
                    "property_id": "{property_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidPropertyStatementPatch": {
        "description": "The provided JSON Patch is invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "property-statement-id-mismatch": {
                "value": {
                  "code": "property-statement-id-mismatch",
                  "message": "IDs of the Property and the Statement do not match",
                  "context": {
                    "property_id": "{property_id}",
                    "statement_id": "{statement_id}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidRetrieveStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidReplaceStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "missing-field": {
                "value": {
                  "code": "missing-field",
                  "message": "Required field missing",
                  "context": {
                    "path": "{json_pointer_to_parent}",
                    "field": "{missing_field}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              },
              "cannot-modify-read-only-value": {
                "value": {
                  "code": "cannot-modify-read-only-value",
                  "message": "The input value cannot be modified",
                  "context": {
                    "path": "{readonly_value_pointer}"
                  }
                }
              },
              "resource-too-large": {
                "value": {
                  "code": "resource-too-large",
                  "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
                  "context": {
                    "limit": "configured_limit_as_int"
                  }
                }
              },
              "referenced-resource-not-found": {
                "value": {
                  "code": "referenced-resource-not-found",
                  "message": "The referenced resource does not exist",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      },
      "InvalidRemoveStatementInput": {
        "description": "The request cannot be processed",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                },
                "context": {
                  "type": "object"
                }
              },
              "required": [
                "code",
                "message"
              ]
            },
            "examples": {
              "invalid-path-parameter": {
                "value": {
                  "code": "invalid-path-parameter",
                  "message": "Invalid path parameter: '{path_parameter}'",
                  "context": {
                    "parameter": "{path_parameter}"
                  }
                }
              },
              "invalid-value": {
                "value": {
                  "code": "invalid-value",
                  "message": "Invalid value at '{json_pointer}'",
                  "context": {
                    "path": "{json_pointer}"
                  }
                }
              },
              "value-too-long": {
                "value": {
                  "code": "value-too-long",
                  "message": "The input value is too long",
                  "context": {
                    "path": "{json_pointer_to_element}",
                    "limit": "{configured_limit}"
                  }
                }
              }
            }
          }
        },
        "headers": {
          "Content-Language": {
            "description": "Language code of the language in which error message is provided",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        }
      }
    },
    "schemas": {
      "Labels": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Descriptions": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "Aliases": {
        "type": "object",
        "additionalProperties": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "Sitelink": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "badges": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string",
            "readOnly": true
          }
        },
        "required": [
          "title"
        ]
      },
      "Sitelinks": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "badges": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "url": {
              "type": "string",
              "readOnly": true
            }
          },
          "required": [
            "title"
          ]
        }
      },
      "PropertyValuePair": {
        "type": "object",
        "properties": {
          "property": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the Property",
                "type": "string"
              },
              "data_type": {
                "description": "The data type of the Property",
                "type": [
                  "string",
                  "null"
                ],
                "readOnly": true
              }
            }
          },
          "value": {
            "type": "object",
            "properties": {
              "content": {
                "description": "The value, if type == \"value\", otherwise omitted"
              },
              "type": {
                "description": "The value type",
                "type": "string",
                "enum": [
                  "value",
                  "somevalue",
                  "novalue"
                ]
              }
            }
          }
        }
      },
      "Reference": {
        "type": "object",
        "properties": {
          "hash": {
            "description": "Hash of the Reference",
            "type": "string",
            "readOnly": true
          },
          "parts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "property": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The ID of the Property",
                      "type": "string"
                    },
                    "data_type": {
                      "description": "The data type of the Property",
                      "type": [
                        "string",
                        "null"
                      ],
                      "readOnly": true
                    }
                  }
                },
                "value": {
                  "type": "object",
                  "properties": {
                    "content": {
                      "description": "The value, if type == \"value\", otherwise omitted"
                    },
                    "type": {
                      "description": "The value type",
                      "type": "string",
                      "enum": [
                        "value",
                        "somevalue",
                        "novalue"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Statement": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "description": "The globally unique identifier for this Statement",
                "type": "string",
                "readOnly": true
              },
              "rank": {
                "description": "The rank of the Statement",
                "type": "string",
                "enum": [
                  "deprecated",
                  "normal",
                  "preferred"
                ],
                "default": "normal"
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "property": {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "The ID of the Property",
                    "type": "string"
                  },
                  "data_type": {
                    "description": "The data type of the Property",
                    "type": [
                      "string",
                      "null"
                    ],
                    "readOnly": true
                  }
                }
              },
              "value": {
                "type": "object",
                "properties": {
                  "content": {
                    "description": "The value, if type == \"value\", otherwise omitted"
                  },
                  "type": {
                    "description": "The value type",
                    "type": "string",
                    "enum": [
                      "value",
                      "somevalue",
                      "novalue"
                    ]
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "properties": {
              "qualifiers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "property": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The ID of the Property",
                          "type": "string"
                        },
                        "data_type": {
                          "description": "The data type of the Property",
                          "type": [
                            "string",
                            "null"
                          ],
                          "readOnly": true
                        }
                      }
                    },
                    "value": {
                      "type": "object",
                      "properties": {
                        "content": {
                          "description": "The value, if type == \"value\", otherwise omitted"
                        },
                        "type": {
                          "description": "The value type",
                          "type": "string",
                          "enum": [
                            "value",
                            "somevalue",
                            "novalue"
                          ]
                        }
                      }
                    }
                  }
                },
                "default": []
              },
              "references": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "hash": {
                      "description": "Hash of the Reference",
                      "type": "string",
                      "readOnly": true
                    },
                    "parts": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "property": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The ID of the Property",
                                "type": "string"
                              },
                              "data_type": {
                                "description": "The data type of the Property",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "readOnly": true
                              }
                            }
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "content": {
                                "description": "The value, if type == \"value\", otherwise omitted"
                              },
                              "type": {
                                "description": "The value type",
                                "type": "string",
                                "enum": [
                                  "value",
                                  "somevalue",
                                  "novalue"
                                ]
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "default": []
              }
            }
          }
        ]
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "const": "item",
            "readOnly": true
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "descriptions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "aliases": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "sitelinks": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "badges": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "url": {
                  "type": "string",
                  "readOnly": true
                }
              },
              "required": [
                "title"
              ]
            }
          },
          "statements": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The globally unique identifier for this Statement",
                        "type": "string",
                        "readOnly": true
                      },
                      "rank": {
                        "description": "The rank of the Statement",
                        "type": "string",
                        "enum": [
                          "deprecated",
                          "normal",
                          "preferred"
                        ],
                        "default": "normal"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "property": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The ID of the Property",
                            "type": "string"
                          },
                          "data_type": {
                            "description": "The data type of the Property",
                            "type": [
                              "string",
                              "null"
                            ],
                            "readOnly": true
                          }
                        }
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "content": {
                            "description": "The value, if type == \"value\", otherwise omitted"
                          },
                          "type": {
                            "description": "The value type",
                            "type": "string",
                            "enum": [
                              "value",
                              "somevalue",
                              "novalue"
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "qualifiers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "default": []
                      },
                      "references": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "hash": {
                              "description": "Hash of the Reference",
                              "type": "string",
                              "readOnly": true
                            },
                            "parts": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "default": []
                      }
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "MediawikiEdit": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": []
          },
          "bot": {
            "type": "boolean",
            "default": false
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "PropertyValueResponseRequired": {
        "required": [
          "property",
          "value"
        ],
        "properties": {
          "property": {
            "required": [
              "id",
              "data_type"
            ]
          },
          "value": {
            "required": [
              "type"
            ]
          }
        }
      },
      "ReferenceResponseRequired": {
        "required": [
          "hash",
          "parts"
        ],
        "properties": {
          "parts": {
            "items": {
              "required": [
                "property",
                "value"
              ],
              "properties": {
                "property": {
                  "required": [
                    "id",
                    "data_type"
                  ]
                },
                "value": {
                  "required": [
                    "type"
                  ]
                }
              }
            }
          }
        }
      },
      "StatementResponseRequired": {
        "allOf": [
          {
            "required": [
              "property",
              "value"
            ],
            "properties": {
              "property": {
                "required": [
                  "id",
                  "data_type"
                ]
              },
              "value": {
                "required": [
                  "type"
                ]
              }
            }
          },
          {
            "required": [
              "id",
              "rank",
              "qualifiers",
              "references"
            ],
            "properties": {
              "qualifiers": {
                "items": {
                  "required": [
                    "property",
                    "value"
                  ],
                  "properties": {
                    "property": {
                      "required": [
                        "id",
                        "data_type"
                      ]
                    },
                    "value": {
                      "required": [
                        "type"
                      ]
                    }
                  }
                }
              },
              "references": {
                "items": {
                  "required": [
                    "hash",
                    "parts"
                  ],
                  "properties": {
                    "parts": {
                      "items": {
                        "required": [
                          "property",
                          "value"
                        ],
                        "properties": {
                          "property": {
                            "required": [
                              "id",
                              "data_type"
                            ]
                          },
                          "value": {
                            "required": [
                              "type"
                            ]
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ItemResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "const": "item",
                "readOnly": true
              },
              "labels": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "descriptions": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "aliases": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "sitelinks": {
                "type": "object",
                "additionalProperties": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "badges": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "url": {
                      "type": "string",
                      "readOnly": true
                    }
                  },
                  "required": [
                    "title"
                  ]
                }
              },
              "statements": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The globally unique identifier for this Statement",
                            "type": "string",
                            "readOnly": true
                          },
                          "rank": {
                            "description": "The rank of the Statement",
                            "type": "string",
                            "enum": [
                              "deprecated",
                              "normal",
                              "preferred"
                            ],
                            "default": "normal"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "property": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The ID of the Property",
                                "type": "string"
                              },
                              "data_type": {
                                "description": "The data type of the Property",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "readOnly": true
                              }
                            }
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "content": {
                                "description": "The value, if type == \"value\", otherwise omitted"
                              },
                              "type": {
                                "description": "The value type",
                                "type": "string",
                                "enum": [
                                  "value",
                                  "somevalue",
                                  "novalue"
                                ]
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "qualifiers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "default": []
                          },
                          "references": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "description": "Hash of the Reference",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "parts": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "default": []
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          {
            "required": [
              "id",
              "type",
              "labels",
              "descriptions",
              "aliases",
              "statements",
              "sitelinks"
            ],
            "properties": {
              "sitelinks": {
                "additionalProperties": {
                  "required": [
                    "title",
                    "badges",
                    "url"
                  ]
                }
              },
              "statements": {
                "additionalProperties": {
                  "items": {
                    "allOf": [
                      {
                        "required": [
                          "property",
                          "value"
                        ],
                        "properties": {
                          "property": {
                            "required": [
                              "id",
                              "data_type"
                            ]
                          },
                          "value": {
                            "required": [
                              "type"
                            ]
                          }
                        }
                      },
                      {
                        "required": [
                          "id",
                          "rank",
                          "qualifiers",
                          "references"
                        ],
                        "properties": {
                          "qualifiers": {
                            "items": {
                              "required": [
                                "property",
                                "value"
                              ],
                              "properties": {
                                "property": {
                                  "required": [
                                    "id",
                                    "data_type"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              }
                            }
                          },
                          "references": {
                            "items": {
                              "required": [
                                "hash",
                                "parts"
                              ],
                              "properties": {
                                "parts": {
                                  "items": {
                                    "required": [
                                      "property",
                                      "value"
                                    ],
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "context": {
            "type": "object"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "PatchDocument": {
        "type": "object",
        "properties": {
          "patch": {
            "description": "A JSON Patch document as defined by RFC 6902",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "op": {
                  "description": "The operation to perform",
                  "type": "string",
                  "enum": [
                    "add",
                    "copy",
                    "move",
                    "remove",
                    "replace",
                    "test"
                  ]
                },
                "path": {
                  "description": "A JSON Pointer",
                  "type": "string"
                },
                "from": {
                  "description": "A JSON Pointer",
                  "type": "string"
                },
                "value": {
                  "description": "The value to be used within the operation"
                }
              },
              "required": [
                "op",
                "path"
              ]
            }
          }
        },
        "required": [
          "patch"
        ]
      },
      "PatchRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "patch": {
                "description": "A JSON Patch document as defined by RFC 6902",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "op": {
                      "description": "The operation to perform",
                      "type": "string",
                      "enum": [
                        "add",
                        "copy",
                        "move",
                        "remove",
                        "replace",
                        "test"
                      ]
                    },
                    "path": {
                      "description": "A JSON Pointer",
                      "type": "string"
                    },
                    "from": {
                      "description": "A JSON Pointer",
                      "type": "string"
                    },
                    "value": {
                      "description": "The value to be used within the operation"
                    }
                  },
                  "required": [
                    "op",
                    "path"
                  ]
                }
              }
            },
            "required": [
              "patch"
            ]
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "bot": {
                "type": "boolean",
                "default": false
              },
              "comment": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Property": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "type": {
            "type": "string",
            "const": "property",
            "readOnly": true
          },
          "data_type": {
            "type": "string"
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "descriptions": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "aliases": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "statements": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The globally unique identifier for this Statement",
                        "type": "string",
                        "readOnly": true
                      },
                      "rank": {
                        "description": "The rank of the Statement",
                        "type": "string",
                        "enum": [
                          "deprecated",
                          "normal",
                          "preferred"
                        ],
                        "default": "normal"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "property": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The ID of the Property",
                            "type": "string"
                          },
                          "data_type": {
                            "description": "The data type of the Property",
                            "type": [
                              "string",
                              "null"
                            ],
                            "readOnly": true
                          }
                        }
                      },
                      "value": {
                        "type": "object",
                        "properties": {
                          "content": {
                            "description": "The value, if type == \"value\", otherwise omitted"
                          },
                          "type": {
                            "description": "The value type",
                            "type": "string",
                            "enum": [
                              "value",
                              "somevalue",
                              "novalue"
                            ]
                          }
                        }
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "qualifiers": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "property": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "The ID of the Property",
                                  "type": "string"
                                },
                                "data_type": {
                                  "description": "The data type of the Property",
                                  "type": [
                                    "string",
                                    "null"
                                  ],
                                  "readOnly": true
                                }
                              }
                            },
                            "value": {
                              "type": "object",
                              "properties": {
                                "content": {
                                  "description": "The value, if type == \"value\", otherwise omitted"
                                },
                                "type": {
                                  "description": "The value type",
                                  "type": "string",
                                  "enum": [
                                    "value",
                                    "somevalue",
                                    "novalue"
                                  ]
                                }
                              }
                            }
                          }
                        },
                        "default": []
                      },
                      "references": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "hash": {
                              "description": "Hash of the Reference",
                              "type": "string",
                              "readOnly": true
                            },
                            "parts": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "property": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "The ID of the Property",
                                        "type": "string"
                                      },
                                      "data_type": {
                                        "description": "The data type of the Property",
                                        "type": [
                                          "string",
                                          "null"
                                        ],
                                        "readOnly": true
                                      }
                                    }
                                  },
                                  "value": {
                                    "type": "object",
                                    "properties": {
                                      "content": {
                                        "description": "The value, if type == \"value\", otherwise omitted"
                                      },
                                      "type": {
                                        "description": "The value type",
                                        "type": "string",
                                        "enum": [
                                          "value",
                                          "somevalue",
                                          "novalue"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "default": []
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "required": [
          "data_type"
        ]
      },
      "PropertyResponse": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "readOnly": true
              },
              "type": {
                "type": "string",
                "const": "property",
                "readOnly": true
              },
              "data_type": {
                "type": "string"
              },
              "labels": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "descriptions": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "aliases": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "statements": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The globally unique identifier for this Statement",
                            "type": "string",
                            "readOnly": true
                          },
                          "rank": {
                            "description": "The rank of the Statement",
                            "type": "string",
                            "enum": [
                              "deprecated",
                              "normal",
                              "preferred"
                            ],
                            "default": "normal"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "property": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The ID of the Property",
                                "type": "string"
                              },
                              "data_type": {
                                "description": "The data type of the Property",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "readOnly": true
                              }
                            }
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "content": {
                                "description": "The value, if type == \"value\", otherwise omitted"
                              },
                              "type": {
                                "description": "The value type",
                                "type": "string",
                                "enum": [
                                  "value",
                                  "somevalue",
                                  "novalue"
                                ]
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "qualifiers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "default": []
                          },
                          "references": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "description": "Hash of the Reference",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "parts": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "default": []
                          }
                        }
                      }
                    ]
                  }
                }
              }
            },
            "required": [
              "data_type"
            ]
          },
          {
            "required": [
              "id",
              "type",
              "data_type",
              "labels",
              "descriptions",
              "aliases",
              "statements"
            ],
            "properties": {
              "statements": {
                "additionalProperties": {
                  "items": {
                    "allOf": [
                      {
                        "required": [
                          "property",
                          "value"
                        ],
                        "properties": {
                          "property": {
                            "required": [
                              "id",
                              "data_type"
                            ]
                          },
                          "value": {
                            "required": [
                              "type"
                            ]
                          }
                        }
                      },
                      {
                        "required": [
                          "id",
                          "rank",
                          "qualifiers",
                          "references"
                        ],
                        "properties": {
                          "qualifiers": {
                            "items": {
                              "required": [
                                "property",
                                "value"
                              ],
                              "properties": {
                                "property": {
                                  "required": [
                                    "id",
                                    "data_type"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              }
                            }
                          },
                          "references": {
                            "items": {
                              "required": [
                                "hash",
                                "parts"
                              ],
                              "properties": {
                                "parts": {
                                  "items": {
                                    "required": [
                                      "property",
                                      "value"
                                    ],
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id",
                                          "data_type"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        ]
      },
      "SetDescriptionInLanguage": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "description": {
                "type": "string"
              }
            },
            "required": [
              "description"
            ]
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "bot": {
                "type": "boolean",
                "default": false
              },
              "comment": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PropertyValueSchemaRequired": {
        "properties": {
          "property": {
            "required": [
              "id",
              "data_type"
            ]
          },
          "value": {
            "required": [
              "type"
            ]
          }
        },
        "required": [
          "property",
          "value"
        ]
      },
      "StatementSchemaRequired": {
        "allOf": [
          {
            "properties": {
              "property": {
                "required": [
                  "id",
                  "data_type"
                ]
              },
              "value": {
                "required": [
                  "type"
                ]
              }
            },
            "required": [
              "property",
              "value"
            ]
          },
          {
            "properties": {
              "qualifiers": {
                "items": {
                  "properties": {
                    "property": {
                      "required": [
                        "id",
                        "data_type"
                      ]
                    },
                    "value": {
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "property",
                    "value"
                  ]
                }
              },
              "references": {
                "properties": {
                  "parts": {
                    "items": {
                      "properties": {
                        "property": {
                          "required": [
                            "id",
                            "data_type"
                          ]
                        },
                        "value": {
                          "required": [
                            "type"
                          ]
                        }
                      },
                      "required": [
                        "property",
                        "value"
                      ]
                    }
                  }
                },
                "required": [
                  "hash",
                  "parts"
                ]
              }
            },
            "required": [
              "id",
              "rank",
              "qualifiers",
              "references"
            ]
          }
        ]
      },
      "StatementSchema": {
        "allOf": [
          {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "id": {
                    "description": "The globally unique identifier for this Statement",
                    "type": "string",
                    "readOnly": true
                  },
                  "rank": {
                    "description": "The rank of the Statement",
                    "type": "string",
                    "enum": [
                      "deprecated",
                      "normal",
                      "preferred"
                    ],
                    "default": "normal"
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "property": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "The ID of the Property",
                        "type": "string"
                      },
                      "data_type": {
                        "description": "The data type of the Property",
                        "type": [
                          "string",
                          "null"
                        ],
                        "readOnly": true
                      }
                    }
                  },
                  "value": {
                    "type": "object",
                    "properties": {
                      "content": {
                        "description": "The value, if type == \"value\", otherwise omitted"
                      },
                      "type": {
                        "description": "The value type",
                        "type": "string",
                        "enum": [
                          "value",
                          "somevalue",
                          "novalue"
                        ]
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "properties": {
                  "qualifiers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "property": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "The ID of the Property",
                              "type": "string"
                            },
                            "data_type": {
                              "description": "The data type of the Property",
                              "type": [
                                "string",
                                "null"
                              ],
                              "readOnly": true
                            }
                          }
                        },
                        "value": {
                          "type": "object",
                          "properties": {
                            "content": {
                              "description": "The value, if type == \"value\", otherwise omitted"
                            },
                            "type": {
                              "description": "The value type",
                              "type": "string",
                              "enum": [
                                "value",
                                "somevalue",
                                "novalue"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "default": []
                  },
                  "references": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "hash": {
                          "description": "Hash of the Reference",
                          "type": "string",
                          "readOnly": true
                        },
                        "parts": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "property": {
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "The ID of the Property",
                                    "type": "string"
                                  },
                                  "data_type": {
                                    "description": "The data type of the Property",
                                    "type": [
                                      "string",
                                      "null"
                                    ],
                                    "readOnly": true
                                  }
                                }
                              },
                              "value": {
                                "type": "object",
                                "properties": {
                                  "content": {
                                    "description": "The value, if type == \"value\", otherwise omitted"
                                  },
                                  "type": {
                                    "description": "The value type",
                                    "type": "string",
                                    "enum": [
                                      "value",
                                      "somevalue",
                                      "novalue"
                                    ]
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "default": []
                  }
                }
              }
            ]
          },
          {
            "allOf": [
              {
                "properties": {
                  "property": {
                    "required": [
                      "id",
                      "data_type"
                    ]
                  },
                  "value": {
                    "required": [
                      "type"
                    ]
                  }
                },
                "required": [
                  "property",
                  "value"
                ]
              },
              {
                "properties": {
                  "qualifiers": {
                    "items": {
                      "properties": {
                        "property": {
                          "required": [
                            "id",
                            "data_type"
                          ]
                        },
                        "value": {
                          "required": [
                            "type"
                          ]
                        }
                      },
                      "required": [
                        "property",
                        "value"
                      ]
                    }
                  },
                  "references": {
                    "properties": {
                      "parts": {
                        "items": {
                          "properties": {
                            "property": {
                              "required": [
                                "id",
                                "data_type"
                              ]
                            },
                            "value": {
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "required": [
                            "property",
                            "value"
                          ]
                        }
                      }
                    },
                    "required": [
                      "hash",
                      "parts"
                    ]
                  }
                },
                "required": [
                  "id",
                  "rank",
                  "qualifiers",
                  "references"
                ]
              }
            ]
          }
        ]
      },
      "PropertyValuePairRequestRequired": {
        "properties": {
          "property": {
            "required": [
              "id"
            ]
          },
          "value": {
            "required": [
              "type"
            ]
          }
        },
        "required": [
          "property",
          "value"
        ]
      },
      "StatementRequestRequired": {
        "allOf": [
          {
            "properties": {
              "property": {
                "required": [
                  "id"
                ]
              },
              "value": {
                "required": [
                  "type"
                ]
              }
            },
            "required": [
              "property",
              "value"
            ]
          },
          {
            "properties": {
              "qualifiers": {
                "items": {
                  "properties": {
                    "property": {
                      "required": [
                        "id"
                      ]
                    },
                    "value": {
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "required": [
                    "property",
                    "value"
                  ]
                }
              },
              "references": {
                "items": {
                  "properties": {
                    "parts": {
                      "items": {
                        "properties": {
                          "property": {
                            "required": [
                              "id"
                            ]
                          },
                          "value": {
                            "required": [
                              "type"
                            ]
                          }
                        },
                        "required": [
                          "property",
                          "value"
                        ]
                      }
                    }
                  },
                  "required": [
                    "parts"
                  ]
                }
              }
            }
          }
        ]
      },
      "StatementRequest": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "statement": {
                "allOf": [
                  {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "The globally unique identifier for this Statement",
                            "type": "string",
                            "readOnly": true
                          },
                          "rank": {
                            "description": "The rank of the Statement",
                            "type": "string",
                            "enum": [
                              "deprecated",
                              "normal",
                              "preferred"
                            ],
                            "default": "normal"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "property": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "The ID of the Property",
                                "type": "string"
                              },
                              "data_type": {
                                "description": "The data type of the Property",
                                "type": [
                                  "string",
                                  "null"
                                ],
                                "readOnly": true
                              }
                            }
                          },
                          "value": {
                            "type": "object",
                            "properties": {
                              "content": {
                                "description": "The value, if type == \"value\", otherwise omitted"
                              },
                              "type": {
                                "description": "The value type",
                                "type": "string",
                                "enum": [
                                  "value",
                                  "somevalue",
                                  "novalue"
                                ]
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "properties": {
                          "qualifiers": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "property": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "The ID of the Property",
                                      "type": "string"
                                    },
                                    "data_type": {
                                      "description": "The data type of the Property",
                                      "type": [
                                        "string",
                                        "null"
                                      ],
                                      "readOnly": true
                                    }
                                  }
                                },
                                "value": {
                                  "type": "object",
                                  "properties": {
                                    "content": {
                                      "description": "The value, if type == \"value\", otherwise omitted"
                                    },
                                    "type": {
                                      "description": "The value type",
                                      "type": "string",
                                      "enum": [
                                        "value",
                                        "somevalue",
                                        "novalue"
                                      ]
                                    }
                                  }
                                }
                              }
                            },
                            "default": []
                          },
                          "references": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "hash": {
                                  "description": "Hash of the Reference",
                                  "type": "string",
                                  "readOnly": true
                                },
                                "parts": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "object",
                                        "properties": {
                                          "id": {
                                            "description": "The ID of the Property",
                                            "type": "string"
                                          },
                                          "data_type": {
                                            "description": "The data type of the Property",
                                            "type": [
                                              "string",
                                              "null"
                                            ],
                                            "readOnly": true
                                          }
                                        }
                                      },
                                      "value": {
                                        "type": "object",
                                        "properties": {
                                          "content": {
                                            "description": "The value, if type == \"value\", otherwise omitted"
                                          },
                                          "type": {
                                            "description": "The value type",
                                            "type": "string",
                                            "enum": [
                                              "value",
                                              "somevalue",
                                              "novalue"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "default": []
                          }
                        }
                      }
                    ]
                  },
                  {
                    "allOf": [
                      {
                        "properties": {
                          "property": {
                            "required": [
                              "id"
                            ]
                          },
                          "value": {
                            "required": [
                              "type"
                            ]
                          }
                        },
                        "required": [
                          "property",
                          "value"
                        ]
                      },
                      {
                        "properties": {
                          "qualifiers": {
                            "items": {
                              "properties": {
                                "property": {
                                  "required": [
                                    "id"
                                  ]
                                },
                                "value": {
                                  "required": [
                                    "type"
                                  ]
                                }
                              },
                              "required": [
                                "property",
                                "value"
                              ]
                            }
                          },
                          "references": {
                            "items": {
                              "properties": {
                                "parts": {
                                  "items": {
                                    "properties": {
                                      "property": {
                                        "required": [
                                          "id"
                                        ]
                                      },
                                      "value": {
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "parts"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            },
            "required": [
              "statement"
            ]
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "bot": {
                "type": "boolean",
                "default": false
              },
              "comment": {
                "type": "string"
              }
            }
          }
        ]
      },
      "AddAliasesInLanguage": {
        "allOf": [
          {
            "type": "object",
            "properties": {
              "aliases": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "aliases"
            ]
          },
          {
            "type": "object",
            "properties": {
              "tags": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "default": []
              },
              "bot": {
                "type": "boolean",
                "default": false
              },
              "comment": {
                "type": "string"
              }
            }
          }
        ]
      },
      "Qualifier": {
        "type": "object",
        "properties": {
          "property": {
            "type": "object",
            "properties": {
              "id": {
                "description": "The ID of the Property",
                "type": "string"
              },
              "data_type": {
                "description": "The data type of the Property",
                "type": [
                  "string",
                  "null"
                ],
                "readOnly": true
              }
            }
          },
          "value": {
            "type": "object",
            "properties": {
              "content": {
                "description": "The value, if type == \"value\", otherwise omitted"
              },
              "type": {
                "description": "The value type",
                "type": "string",
                "enum": [
                  "value",
                  "somevalue",
                  "novalue"
                ]
              }
            }
          }
        }
      }
    },
    "examples": {
      "ValueTooLongExample": {
        "value": {
          "code": "value-too-long",
          "message": "The input value is too long",
          "context": {
            "path": "{json_pointer_to_element}",
            "limit": "{configured_limit}"
          }
        }
      },
      "StatementGroupPropertyIdMismatch": {
        "value": {
          "code": "statement-group-property-id-mismatch",
          "message": "Statement's Property ID does not match the Statement group key",
          "context": {
            "path": "{property_id_key}/{index}/property/id",
            "statement_group_property_id": "{property_id_key}",
            "statement_property_id": "{property_id_value}"
          }
        }
      },
      "ReferencedResourceNotFoundExample": {
        "value": {
          "code": "referenced-resource-not-found",
          "message": "The referenced resource does not exist",
          "context": {
            "path": "{json_pointer}"
          }
        }
      },
      "InvalidValueExample": {
        "value": {
          "code": "invalid-value",
          "message": "Invalid value at '{json_pointer}'",
          "context": {
            "path": "{json_pointer}"
          }
        }
      },
      "MissingFieldExample": {
        "value": {
          "code": "missing-field",
          "message": "Required field missing",
          "context": {
            "path": "{json_pointer_to_parent}",
            "field": "{missing_field}"
          }
        }
      },
      "InvalidKeyExample": {
        "value": {
          "code": "invalid-key",
          "message": "Invalid key '{key}' in '{json_pointer_to_parent}'",
          "context": {
            "path": "{json_pointer_to_parent}",
            "key": "{key}"
          }
        }
      },
      "ResourceTooLargeExample": {
        "value": {
          "code": "resource-too-large",
          "message": "Edit resulted in a resource that exceeds the size limit of {configured_limit}",
          "context": {
            "limit": "configured_limit_as_int"
          }
        }
      },
      "PermissionDeniedExample": {
        "value": {
          "code": "permission-denied",
          "message": "Access to resource is denied",
          "context": {
            "denial_reason": "{reason_code}",
            "denial_context": "{additional_context}"
          }
        }
      },
      "DataPolicyViolationExample": {
        "value": {
          "code": "data-policy-violation",
          "message": "Edit violates data policy",
          "context": {
            "violation": "{violation_code}",
            "violation_context": {
              "some": "context"
            }
          }
        }
      },
      "InvalidPathParameterExample": {
        "value": {
          "code": "invalid-path-parameter",
          "message": "Invalid path parameter: '{path_parameter}'",
          "context": {
            "parameter": "{path_parameter}"
          }
        }
      },
      "InvalidQueryParameterExample": {
        "value": {
          "code": "invalid-query-parameter",
          "message": "Invalid query parameter: '{parameter}'",
          "context": {
            "parameter": "{parameter}"
          }
        }
      },
      "ResourceNotFoundExample": {
        "value": {
          "code": "resource-not-found",
          "message": "The requested resource does not exist",
          "context": {
            "resource_type": "{resource_type}"
          }
        }
      },
      "RedirectedItemExample": {
        "value": {
          "code": "redirected-item",
          "message": "Item {item_id} has been redirected to {redirect_target_id}",
          "context": {
            "redirect_target": "{redirect_target_id}"
          }
        }
      },
      "PatchTestFailedExample": {
        "value": {
          "code": "patch-test-failed",
          "message": "Test operation in the provided patch failed",
          "context": {
            "path": "{json_pointer_to_patch_operation}",
            "actual_value": "actual value"
          }
        }
      },
      "PatchTargetNotFoundExample": {
        "value": {
          "code": "patch-target-not-found",
          "message": "Target not found on resource",
          "context": {
            "path": "{json_pointer_to_target_in_patch}"
          }
        }
      },
      "PatchResultInvalidValueExample": {
        "value": {
          "code": "patch-result-invalid-value",
          "message": "Invalid value in patch result",
          "context": {
            "value": "{value}",
            "path": "{path}"
          }
        }
      },
      "PatchedStatementGroupPropertyIdMismatchExample": {
        "value": {
          "code": "patched-statement-group-property-id-mismatch",
          "message": "Statement's Property ID does not match the Statement group key",
          "context": {
            "path": "{property_id_key}/{index}/property/id",
            "statement_group_property_id": "{property_id_key}",
            "statement_property_id": "{property_id_value}"
          }
        }
      },
      "PatchResultResourceNotFoundExample": {
        "value": {
          "code": "patch-result-referenced-resource-not-found",
          "message": "The referenced resource does not exist",
          "context": {
            "path": "{json_pointer_to_missing_resource_in_patch_result}",
            "value": "{value}"
          }
        }
      },
      "PatchResultMissingFieldExample": {
        "value": {
          "code": "patch-result-missing-field",
          "message": "Required field missing in patch result",
          "context": {
            "path": "{json_pointer_to_parent}",
            "field": "{missing_field}"
          }
        }
      },
      "PatchResultInvalidKeyExample": {
        "value": {
          "code": "patch-result-invalid-key",
          "message": "Invalid key in patch result",
          "context": {
            "path": "{json_pointer_to_parent_in_patch_result}",
            "key": "{key}"
          }
        }
      },
      "PatchResultValueTooLongExample": {
        "value": {
          "code": "patch-result-value-too-long",
          "message": "Patched value is too long",
          "context": {
            "path": "{json_pointer_to_patched_element}",
            "limit": "{configured_limit}"
          }
        }
      },
      "PatchResultModifiedReadOnlyValue": {
        "value": {
          "code": "patch-result-modified-read-only-value",
          "message": "Read only value in patch result cannot be modified",
          "context": {
            "path": "{json_pointer_to_readonly_value}"
          }
        }
      },
      "ItemStatementIdMismatchExample": {
        "value": {
          "code": "item-statement-id-mismatch",
          "message": "IDs of the Item and the Statement do not match",
          "context": {
            "item_id": "{item_id}",
            "statement_id": "{statement_id}"
          }
        }
      },
      "CannotModifyReadOnlyValue": {
        "value": {
          "code": "cannot-modify-read-only-value",
          "message": "The input value cannot be modified",
          "context": {
            "path": "{readonly_value_pointer}"
          }
        }
      },
      "PropertyStatementIdMismatchExample": {
        "value": {
          "code": "property-statement-id-mismatch",
          "message": "IDs of the Property and the Statement do not match",
          "context": {
            "property_id": "{property_id}",
            "statement_id": "{statement_id}"
          }
        }
      }
    }
  }
}